// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Organisations index component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <OrganisationEdit>
    <Space
      direction="vertical"
    >
      <div
        className="ant-space ant-space-vertical"
        style={Object {}}
      >
        <Item
          className="ant-space-item"
          direction="vertical"
          index={0}
          key="ant-space-item-0"
          marginDirection="marginRight"
          wrap={false}
        >
          <div
            className="ant-space-item"
            style={
              Object {
                "marginBottom": 8,
              }
            }
          >
            <ForwardRef(InternalForm)
              form={
                Object {
                  "__INTERNAL__": Object {
                    "itemRef": [Function],
                    "name": "organisation_edit",
                  },
                  "getFieldError": [Function],
                  "getFieldInstance": [Function],
                  "getFieldValue": [Function],
                  "getFieldsError": [Function],
                  "getFieldsValue": [Function],
                  "getInternalHooks": [Function],
                  "isFieldTouched": [Function],
                  "isFieldValidating": [Function],
                  "isFieldsTouched": [Function],
                  "isFieldsValidating": [Function],
                  "resetFields": [Function],
                  "scrollToField": [Function],
                  "setFields": [Function],
                  "setFieldsValue": [Function],
                  "submit": [Function],
                  "validateFields": [Function],
                }
              }
              initialValues={
                Object {
                  "description": "description",
                  "id": 1,
                  "slug": "title",
                  "title": "title",
                }
              }
              layout="vertical"
              name="organisation_edit"
              onFinish={[Function]}
              style={
                Object {
                  "width": "400px",
                }
              }
            >
              <SizeContextProvider>
                <ForwardRef(Form)
                  className="ant-form ant-form-vertical"
                  form={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "organisation_edit",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                    }
                  }
                  id="organisation_edit"
                  initialValues={
                    Object {
                      "description": "description",
                      "id": 1,
                      "slug": "title",
                      "title": "title",
                    }
                  }
                  name="organisation_edit"
                  onFinish={[Function]}
                  onFinishFailed={[Function]}
                  style={
                    Object {
                      "width": "400px",
                    }
                  }
                >
                  <form
                    className="ant-form ant-form-vertical"
                    id="organisation_edit"
                    onSubmit={[Function]}
                    style={
                      Object {
                        "width": "400px",
                      }
                    }
                  >
                    <FormItem
                      label="Title"
                      name="title"
                    >
                      <WrapperField
                        label="Title"
                        messageVariables={
                          Object {
                            "label": "Title",
                          }
                        }
                        name="title"
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "organisation_edit",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_title"
                          label="Title"
                          messageVariables={
                            Object {
                              "label": "Title",
                            }
                          }
                          name={
                            Array [
                              "title",
                            ]
                          }
                          onReset={[Function]}
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="organisation_edit_title"
                                label="Title"
                                name="title"
                                prefixCls="ant-form"
                                required={false}
                                requiredMark={true}
                              >
                                <Col
                                  className="ant-form-item-label"
                                >
                                  <div
                                    className="ant-col ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className=""
                                      htmlFor="organisation_edit_title"
                                      title="Title"
                                    >
                                      Title
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="Title"
                                name={
                                  Array [
                                    "title",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                          value="title"
                                        >
                                          <Input
                                            id="organisation_edit_title"
                                            onChange={[Function]}
                                            placeholder="Title"
                                            type="text"
                                            value="title"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="organisation_edit_title"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Title"
                                                  type="text"
                                                  value="title"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="organisation_edit_title"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="Title"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value="title"
                                            >
                                              <input
                                                className="ant-input"
                                                id="organisation_edit_title"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Title"
                                                type="text"
                                                value="title"
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem
                      label="Slug"
                      name="slug"
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                        ]
                      }
                    >
                      <WrapperField
                        label="Slug"
                        messageVariables={
                          Object {
                            "label": "Slug",
                          }
                        }
                        name="slug"
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input the slug!",
                              "required": true,
                            },
                            Object {
                              "message": "Please enter valid slug!",
                              "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "organisation_edit",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_slug"
                          label="Slug"
                          messageVariables={
                            Object {
                              "label": "Slug",
                            }
                          }
                          name={
                            Array [
                              "slug",
                            ]
                          }
                          onReset={[Function]}
                          rules={
                            Array [
                              Object {
                                "message": "Please input the slug!",
                                "required": true,
                              },
                              Object {
                                "message": "Please enter valid slug!",
                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                              },
                            ]
                          }
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="organisation_edit_slug"
                                label="Slug"
                                name="slug"
                                prefixCls="ant-form"
                                required={true}
                                requiredMark={true}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input the slug!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please enter valid slug!",
                                      "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                    },
                                  ]
                                }
                              >
                                <Col
                                  className="ant-form-item-label"
                                >
                                  <div
                                    className="ant-col ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className="ant-form-item-required"
                                      htmlFor="organisation_edit_slug"
                                      title="Slug"
                                    >
                                      Slug
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="Slug"
                                name={
                                  Array [
                                    "slug",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input the slug!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please enter valid slug!",
                                      "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                    },
                                  ]
                                }
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                          value="title"
                                        >
                                          <Input
                                            id="organisation_edit_slug"
                                            onChange={[Function]}
                                            placeholder="Slug"
                                            type="text"
                                            value="title"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="organisation_edit_slug"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Slug"
                                                  type="text"
                                                  value="title"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="organisation_edit_slug"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="Slug"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value="title"
                                            >
                                              <input
                                                className="ant-input"
                                                id="organisation_edit_slug"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Slug"
                                                type="text"
                                                value="title"
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem
                      label="Description"
                      name="description"
                    >
                      <WrapperField
                        label="Description"
                        messageVariables={
                          Object {
                            "label": "Description",
                          }
                        }
                        name="description"
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "organisation_edit",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_description"
                          label="Description"
                          messageVariables={
                            Object {
                              "label": "Description",
                            }
                          }
                          name={
                            Array [
                              "description",
                            ]
                          }
                          onReset={[Function]}
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="organisation_edit_description"
                                label="Description"
                                name="description"
                                prefixCls="ant-form"
                                required={false}
                                requiredMark={true}
                              >
                                <Col
                                  className="ant-form-item-label"
                                >
                                  <div
                                    className="ant-col ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className=""
                                      htmlFor="organisation_edit_description"
                                      title="Description"
                                    >
                                      Description
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="Description"
                                name={
                                  Array [
                                    "description",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                >
                                  <div
                                    className="ant-col ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                          value="description"
                                        >
                                          <ForwardRef
                                            id="organisation_edit_description"
                                            onChange={[Function]}
                                            placeholder="Description"
                                            value="description"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <TextArea
                                                  className=""
                                                  id="organisation_edit_description"
                                                  onChange={[Function]}
                                                  placeholder="Description"
                                                  prefixCls="ant-input"
                                                  value="description"
                                                />
                                              }
                                              handleReset={[Function]}
                                              id="organisation_edit_description"
                                              inputType="text"
                                              onChange={[Function]}
                                              placeholder="Description"
                                              prefixCls="ant-input"
                                              value="description"
                                            >
                                              <TextArea
                                                className=""
                                                id="organisation_edit_description"
                                                onChange={[Function]}
                                                placeholder="Description"
                                                prefixCls="ant-input"
                                                value="description"
                                              >
                                                <ResizableTextArea
                                                  className=""
                                                  id="organisation_edit_description"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Description"
                                                  prefixCls="ant-input"
                                                  value="description"
                                                >
                                                  <ResizeObserver
                                                    disabled={true}
                                                    onResize={[Function]}
                                                  >
                                                    <textarea
                                                      className="ant-input"
                                                      id="organisation_edit_description"
                                                      onChange={[Function]}
                                                      onKeyDown={[Function]}
                                                      placeholder="Description"
                                                      style={Object {}}
                                                      value="description"
                                                    />
                                                  </ResizeObserver>
                                                </ResizableTextArea>
                                              </TextArea>
                                            </ClearableLabeledInput>
                                          </ForwardRef>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem>
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            prefixCls="ant-form"
                            requiredMark={true}
                          />
                          <FormItemInput
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            validateStatus=""
                          >
                            <Col
                              className="ant-form-item-control"
                            >
                              <div
                                className="ant-col ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Button
                                      block={true}
                                      form="organisation_edit"
                                      htmlType="submit"
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary ant-btn-block"
                                          form="organisation_edit"
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Save
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </FormItem>
                  </form>
                </ForwardRef(Form)>
              </SizeContextProvider>
            </ForwardRef(InternalForm)>
          </div>
        </Item>
        <Item
          className="ant-space-item"
          direction="vertical"
          index={1}
          key="ant-space-item-1"
          marginDirection="marginRight"
          wrap={false}
        >
          <div
            className="ant-space-item"
            style={
              Object {
                "marginBottom": 8,
              }
            }
          >
            <Divider
              orientation="left"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              <div
                className="ant-divider ant-divider-horizontal ant-divider-with-text ant-divider-with-text-left"
                role="separator"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                <span
                  className="ant-divider-inner-text"
                >
                  Danger zone
                </span>
              </div>
            </Divider>
          </div>
        </Item>
        <Item
          className="ant-space-item"
          direction="vertical"
          index={2}
          key="ant-space-item-2"
          marginDirection="marginRight"
          wrap={false}
        >
          <div
            className="ant-space-item"
            style={
              Object {
                "marginBottom": 8,
              }
            }
          >
            <Button
              onClick={[Function]}
            >
              <Wave>
                <button
                  className="ant-btn"
                  onClick={[Function]}
                  type="button"
                >
                  <LoadingIcon
                    existIcon={false}
                    loading={false}
                    prefixCls="ant-btn"
                  >
                    <CSSMotion
                      motionName="ant-btn-loading-icon-motion"
                      onAppearActive={[Function]}
                      onAppearStart={[Function]}
                      onEnterActive={[Function]}
                      onEnterStart={[Function]}
                      onLeaveActive={[Function]}
                      onLeaveStart={[Function]}
                      removeOnLeave={true}
                      visible={false}
                    >
                      <DomWrapper />
                    </CSSMotion>
                  </LoadingIcon>
                  <span
                    key=".0"
                  >
                    Delete
                  </span>
                </button>
              </Wave>
            </Button>
          </div>
        </Item>
        <Item
          className="ant-space-item"
          direction="vertical"
          index={3}
          key="ant-space-item-3"
          marginDirection="marginRight"
          wrap={false}
        >
          <div
            className="ant-space-item"
            style={Object {}}
          >
            <Modal
              confirmLoading={false}
              maskTransitionName="fade"
              okType="primary"
              onCancel={[Function]}
              onOk={[Function]}
              transitionName="zoom"
              visible={false}
              width={520}
            >
              <Dialog
                closeIcon={
                  <span
                    className="ant-modal-close-x"
                  >
                    <ForwardRef(CloseOutlined)
                      className="ant-modal-close-icon"
                    />
                  </span>
                }
                confirmLoading={false}
                focusTriggerAfterClose={true}
                footer={
                  <LocaleReceiver
                    componentName="Modal"
                    defaultLocale={
                      Object {
                        "cancelText": "Cancel",
                        "justOkText": "OK",
                        "okText": "OK",
                      }
                    }
                  >
                    [Function]
                  </LocaleReceiver>
                }
                maskTransitionName="fade"
                okType="primary"
                onCancel={[Function]}
                onClose={[Function]}
                onOk={[Function]}
                prefixCls="ant-modal"
                transitionName="zoom"
                visible={false}
                width={520}
                wrapClassName=""
              >
                <PortalWrapper
                  visible={false}
                />
              </Dialog>
            </Modal>
          </div>
        </Item>
      </div>
    </Space>
  </OrganisationEdit>
</Provider>
`;
