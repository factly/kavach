// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Categories List component Snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Selector>
    <ForwardRef(InternalSelect)
      bordered={true}
      defaultValue={
        Array [
          undefined,
        ]
      }
      filterOption={[Function]}
      listHeight={128}
      loading={false}
      onChange={[Function]}
      placeholder="select user"
      style={
        Object {
          "width": 200,
        }
      }
    >
      <Select
        className=""
        clearIcon={<ForwardRef(CloseCircleFilled) />}
        defaultValue={
          Array [
            undefined,
          ]
        }
        disabled={false}
        dropdownClassName=""
        filterOption={[Function]}
        inputIcon={[Function]}
        listHeight={128}
        listItemHeight={24}
        loading={false}
        menuItemSelectedIcon={null}
        notFoundContent={
          <Context.Consumer>
            [Function]
          </Context.Consumer>
        }
        onChange={[Function]}
        placeholder="select user"
        placement="bottomLeft"
        prefixCls="ant-select"
        removeIcon={<ForwardRef(CloseOutlined) />}
        style={
          Object {
            "width": 200,
          }
        }
        transitionName="ant-slide-up"
      >
        <BaseSelect
          OptionList={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "OptionList",
              "render": [Function],
            }
          }
          activeDescendantId="undefined_list_0"
          activeValue={null}
          autoClearSearchValue={true}
          className=""
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          displayValues={
            Array [
              Object {
                "disabled": undefined,
                "key": undefined,
                "label": undefined,
                "title": undefined,
                "value": undefined,
              },
            ]
          }
          dropdownClassName=""
          dropdownMatchSelectWidth={true}
          emptyOptions={false}
          inputIcon={[Function]}
          loading={false}
          notFoundContent={
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          }
          omitDomProps={
            Array [
              "inputValue",
            ]
          }
          onDisplayValuesChange={[Function]}
          onSearch={[Function]}
          onSearchSplit={[Function]}
          placeholder="select user"
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          searchValue=""
          style={
            Object {
              "width": 200,
            }
          }
          transitionName="ant-slide-up"
        >
          <div
            className="ant-select ant-select-single ant-select-show-arrow"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "width": 200,
              }
            }
          >
            <SelectTrigger
              containerWidth={null}
              disabled={false}
              dropdownClassName=""
              dropdownMatchSelectWidth={true}
              empty={false}
              getTriggerDOMNode={[Function]}
              onPopupMouseEnter={[Function]}
              placement="bottomLeft"
              popupElement={<ForwardRef(OptionList) />}
              prefixCls="ant-select"
              transitionName="ant-slide-up"
            >
              <Trigger
                action={Array []}
                afterPopupVisibleChange={[Function]}
                autoDestroy={false}
                blurDelay={0.15}
                builtinPlacements={
                  Object {
                    "bottomLeft": Object {
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                    },
                    "bottomRight": Object {
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                    },
                    "topLeft": Object {
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                    },
                    "topRight": Object {
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                    },
                  }
                }
                defaultPopupVisible={false}
                destroyPopupOnHide={false}
                focusDelay={0}
                getDocument={[Function]}
                getPopupClassNameFromAlign={[Function]}
                getTriggerDOMNode={[Function]}
                hideAction={Array []}
                mask={false}
                maskClosable={true}
                mouseEnterDelay={0}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onPopupVisibleChange={[Function]}
                popup={
                  <div
                    onMouseEnter={[Function]}
                  >
                    <ForwardRef(OptionList) />
                  </div>
                }
                popupAlign={Object {}}
                popupClassName=""
                popupPlacement="bottomLeft"
                popupStyle={
                  Object {
                    "minWidth": null,
                    "width": null,
                  }
                }
                popupTransitionName="ant-slide-up"
                prefixCls="ant-select-dropdown"
                showAction={Array []}
              >
                <Selector
                  OptionList={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "displayName": "OptionList",
                      "render": [Function],
                    }
                  }
                  activeDescendantId="undefined_list_0"
                  activeValue={null}
                  autoClearSearchValue={true}
                  className=""
                  clearIcon={<ForwardRef(CloseCircleFilled) />}
                  disabled={false}
                  displayValues={
                    Array [
                      Object {
                        "disabled": undefined,
                        "key": undefined,
                        "label": undefined,
                        "title": undefined,
                        "value": undefined,
                      },
                    ]
                  }
                  domRef={
                    Object {
                      "current": <div
                        class="ant-select-selector"
                      >
                        <span
                          class="ant-select-selection-search"
                        >
                          <input
                            aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                            aria-autocomplete="list"
                            aria-controls="rc_select_TEST_OR_SSR_list"
                            aria-haspopup="listbox"
                            aria-owns="rc_select_TEST_OR_SSR_list"
                            autocomplete="off"
                            class="ant-select-selection-search-input"
                            id="rc_select_TEST_OR_SSR"
                            readonly=""
                            role="combobox"
                            style="opacity: 0;"
                            type="search"
                            unselectable="on"
                            value=""
                          />
                        </span>
                        <span
                          class="ant-select-selection-item"
                        />
                      </div>,
                    }
                  }
                  dropdownClassName=""
                  dropdownMatchSelectWidth={true}
                  emptyOptions={false}
                  inputElement={null}
                  inputIcon={[Function]}
                  key="trigger"
                  loading={false}
                  notFoundContent={
                    <Context.Consumer>
                      [Function]
                    </Context.Consumer>
                  }
                  omitDomProps={
                    Array [
                      "inputValue",
                    ]
                  }
                  onDisplayValuesChange={[Function]}
                  onRemove={[Function]}
                  onSearch={[Function]}
                  onSearchSplit={[Function]}
                  onSearchSubmit={[Function]}
                  onToggleOpen={[Function]}
                  placeholder="select user"
                  placement="bottomLeft"
                  prefixCls="ant-select"
                  removeIcon={<ForwardRef(CloseOutlined) />}
                  searchValue=""
                  showSearch={false}
                  style={
                    Object {
                      "width": 200,
                    }
                  }
                  tokenWithEnter={false}
                  transitionName="ant-slide-up"
                  values={
                    Array [
                      Object {
                        "disabled": undefined,
                        "key": undefined,
                        "label": undefined,
                        "title": undefined,
                        "value": undefined,
                      },
                    ]
                  }
                >
                  <div
                    className="ant-select-selector"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                  >
                    <SingleSelector
                      OptionList={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "displayName": "OptionList",
                          "render": [Function],
                        }
                      }
                      activeDescendantId="undefined_list_0"
                      activeValue={null}
                      autoClearSearchValue={true}
                      className=""
                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                      disabled={false}
                      displayValues={
                        Array [
                          Object {
                            "disabled": undefined,
                            "key": undefined,
                            "label": undefined,
                            "title": undefined,
                            "value": undefined,
                          },
                        ]
                      }
                      domRef={
                        Object {
                          "current": <div
                            class="ant-select-selector"
                          >
                            <span
                              class="ant-select-selection-search"
                            >
                              <input
                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                aria-autocomplete="list"
                                aria-controls="rc_select_TEST_OR_SSR_list"
                                aria-haspopup="listbox"
                                aria-owns="rc_select_TEST_OR_SSR_list"
                                autocomplete="off"
                                class="ant-select-selection-search-input"
                                id="rc_select_TEST_OR_SSR"
                                readonly=""
                                role="combobox"
                                style="opacity: 0;"
                                type="search"
                                unselectable="on"
                                value=""
                              />
                            </span>
                            <span
                              class="ant-select-selection-item"
                            />
                          </div>,
                        }
                      }
                      dropdownClassName=""
                      dropdownMatchSelectWidth={true}
                      emptyOptions={false}
                      inputElement={null}
                      inputIcon={[Function]}
                      inputRef={
                        Object {
                          "current": <input
                            aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                            aria-autocomplete="list"
                            aria-controls="rc_select_TEST_OR_SSR_list"
                            aria-haspopup="listbox"
                            aria-owns="rc_select_TEST_OR_SSR_list"
                            autocomplete="off"
                            class="ant-select-selection-search-input"
                            id="rc_select_TEST_OR_SSR"
                            readonly=""
                            role="combobox"
                            style="opacity: 0;"
                            type="search"
                            unselectable="on"
                            value=""
                          />,
                        }
                      }
                      loading={false}
                      notFoundContent={
                        <Context.Consumer>
                          [Function]
                        </Context.Consumer>
                      }
                      omitDomProps={
                        Array [
                          "inputValue",
                        ]
                      }
                      onDisplayValuesChange={[Function]}
                      onInputChange={[Function]}
                      onInputCompositionEnd={[Function]}
                      onInputCompositionStart={[Function]}
                      onInputKeyDown={[Function]}
                      onInputMouseDown={[Function]}
                      onInputPaste={[Function]}
                      onRemove={[Function]}
                      onSearch={[Function]}
                      onSearchSplit={[Function]}
                      onSearchSubmit={[Function]}
                      onToggleOpen={[Function]}
                      placeholder="select user"
                      placement="bottomLeft"
                      prefixCls="ant-select"
                      removeIcon={<ForwardRef(CloseOutlined) />}
                      searchValue=""
                      showSearch={false}
                      style={
                        Object {
                          "width": 200,
                        }
                      }
                      tokenWithEnter={false}
                      transitionName="ant-slide-up"
                      values={
                        Array [
                          Object {
                            "disabled": undefined,
                            "key": undefined,
                            "label": undefined,
                            "title": undefined,
                            "value": undefined,
                          },
                        ]
                      }
                    >
                      <span
                        className="ant-select-selection-search"
                      >
                        <Input
                          activeDescendantId="undefined_list_0"
                          attrs={Object {}}
                          disabled={false}
                          editable={false}
                          inputElement={null}
                          onChange={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onPaste={[Function]}
                          prefixCls="ant-select"
                          value=""
                        >
                          <input
                            aria-activedescendant="undefined_list_0"
                            aria-autocomplete="list"
                            aria-controls="undefined_list"
                            aria-haspopup="listbox"
                            aria-owns="undefined_list"
                            autoComplete="off"
                            className="ant-select-selection-search-input"
                            disabled={false}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            readOnly={true}
                            role="combobox"
                            style={
                              Object {
                                "opacity": 0,
                              }
                            }
                            type="search"
                            unselectable="on"
                            value=""
                          />
                        </Input>
                      </span>
                      <span
                        className="ant-select-selection-item"
                      />
                    </SingleSelector>
                  </div>
                </Selector>
              </Trigger>
            </SelectTrigger>
            <TransBtn
              className="ant-select-arrow"
              customizeIcon={[Function]}
              customizeIconProps={
                Object {
                  "focused": false,
                  "loading": false,
                  "open": undefined,
                  "searchValue": "",
                  "showSearch": false,
                }
              }
            >
              <span
                aria-hidden={true}
                className="ant-select-arrow"
                onMouseDown={[Function]}
                style={
                  Object {
                    "WebkitUserSelect": "none",
                    "userSelect": "none",
                  }
                }
                unselectable="on"
              >
                <ForwardRef(DownOutlined)
                  className="ant-select-suffix"
                >
                  <AntdIcon
                    className="ant-select-suffix"
                    icon={
                      Object {
                        "icon": Object {
                          "attrs": Object {
                            "focusable": "false",
                            "viewBox": "64 64 896 896",
                          },
                          "children": Array [
                            Object {
                              "attrs": Object {
                                "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                              },
                              "tag": "path",
                            },
                          ],
                          "tag": "svg",
                        },
                        "name": "down",
                        "theme": "outlined",
                      }
                    }
                  >
                    <span
                      aria-label="down"
                      className="anticon anticon-down ant-select-suffix"
                      role="img"
                    >
                      <IconReact
                        icon={
                          Object {
                            "icon": Object {
                              "attrs": Object {
                                "focusable": "false",
                                "viewBox": "64 64 896 896",
                              },
                              "children": Array [
                                Object {
                                  "attrs": Object {
                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                  },
                                  "tag": "path",
                                },
                              ],
                              "tag": "svg",
                            },
                            "name": "down",
                            "theme": "outlined",
                          }
                        }
                      >
                        <svg
                          aria-hidden="true"
                          data-icon="down"
                          fill="currentColor"
                          focusable="false"
                          height="1em"
                          key="svg-down"
                          viewBox="64 64 896 896"
                          width="1em"
                        >
                          <path
                            d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                            key="svg-down-svg-0"
                          />
                        </svg>
                      </IconReact>
                    </span>
                  </AntdIcon>
                </ForwardRef(DownOutlined)>
              </span>
            </TransBtn>
          </div>
        </BaseSelect>
      </Select>
    </ForwardRef(InternalSelect)>
  </Selector>
</Provider>
`;

exports[`Categories List component Snapshot testing should render the component with data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Selector>
    <ForwardRef(InternalSelect)
      bordered={true}
      defaultValue={
        Array [
          undefined,
        ]
      }
      filterOption={[Function]}
      listHeight={128}
      loading={false}
      onChange={[Function]}
      placeholder="select user"
      style={
        Object {
          "width": 200,
        }
      }
    >
      <Select
        className=""
        clearIcon={<ForwardRef(CloseCircleFilled) />}
        defaultValue={
          Array [
            undefined,
          ]
        }
        disabled={false}
        dropdownClassName=""
        filterOption={[Function]}
        inputIcon={[Function]}
        listHeight={128}
        listItemHeight={24}
        loading={false}
        menuItemSelectedIcon={null}
        notFoundContent={
          <Context.Consumer>
            [Function]
          </Context.Consumer>
        }
        onChange={[Function]}
        placeholder="select user"
        placement="bottomLeft"
        prefixCls="ant-select"
        removeIcon={<ForwardRef(CloseOutlined) />}
        style={
          Object {
            "width": 200,
          }
        }
        transitionName="ant-slide-up"
      >
        <BaseSelect
          OptionList={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "OptionList",
              "render": [Function],
            }
          }
          activeDescendantId="undefined_list_0"
          activeValue={null}
          autoClearSearchValue={true}
          className=""
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          displayValues={
            Array [
              Object {
                "disabled": undefined,
                "key": undefined,
                "label": undefined,
                "title": undefined,
                "value": undefined,
              },
            ]
          }
          dropdownClassName=""
          dropdownMatchSelectWidth={true}
          emptyOptions={false}
          inputIcon={[Function]}
          loading={false}
          notFoundContent={
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          }
          omitDomProps={
            Array [
              "inputValue",
            ]
          }
          onDisplayValuesChange={[Function]}
          onSearch={[Function]}
          onSearchSplit={[Function]}
          placeholder="select user"
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          searchValue=""
          style={
            Object {
              "width": 200,
            }
          }
          transitionName="ant-slide-up"
        >
          <div
            className="ant-select ant-select-single ant-select-show-arrow"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "width": 200,
              }
            }
          >
            <SelectTrigger
              containerWidth={null}
              disabled={false}
              dropdownClassName=""
              dropdownMatchSelectWidth={true}
              empty={false}
              getTriggerDOMNode={[Function]}
              onPopupMouseEnter={[Function]}
              placement="bottomLeft"
              popupElement={<ForwardRef(OptionList) />}
              prefixCls="ant-select"
              transitionName="ant-slide-up"
            >
              <Trigger
                action={Array []}
                afterPopupVisibleChange={[Function]}
                autoDestroy={false}
                blurDelay={0.15}
                builtinPlacements={
                  Object {
                    "bottomLeft": Object {
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                    },
                    "bottomRight": Object {
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                    },
                    "topLeft": Object {
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                    },
                    "topRight": Object {
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                    },
                  }
                }
                defaultPopupVisible={false}
                destroyPopupOnHide={false}
                focusDelay={0}
                getDocument={[Function]}
                getPopupClassNameFromAlign={[Function]}
                getTriggerDOMNode={[Function]}
                hideAction={Array []}
                mask={false}
                maskClosable={true}
                mouseEnterDelay={0}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onPopupVisibleChange={[Function]}
                popup={
                  <div
                    onMouseEnter={[Function]}
                  >
                    <ForwardRef(OptionList) />
                  </div>
                }
                popupAlign={Object {}}
                popupClassName=""
                popupPlacement="bottomLeft"
                popupStyle={
                  Object {
                    "minWidth": null,
                    "width": null,
                  }
                }
                popupTransitionName="ant-slide-up"
                prefixCls="ant-select-dropdown"
                showAction={Array []}
              >
                <Selector
                  OptionList={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "displayName": "OptionList",
                      "render": [Function],
                    }
                  }
                  activeDescendantId="undefined_list_0"
                  activeValue={null}
                  autoClearSearchValue={true}
                  className=""
                  clearIcon={<ForwardRef(CloseCircleFilled) />}
                  disabled={false}
                  displayValues={
                    Array [
                      Object {
                        "disabled": undefined,
                        "key": undefined,
                        "label": undefined,
                        "title": undefined,
                        "value": undefined,
                      },
                    ]
                  }
                  domRef={
                    Object {
                      "current": <div
                        class="ant-select-selector"
                      >
                        <span
                          class="ant-select-selection-search"
                        >
                          <input
                            aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                            aria-autocomplete="list"
                            aria-controls="rc_select_TEST_OR_SSR_list"
                            aria-haspopup="listbox"
                            aria-owns="rc_select_TEST_OR_SSR_list"
                            autocomplete="off"
                            class="ant-select-selection-search-input"
                            id="rc_select_TEST_OR_SSR"
                            readonly=""
                            role="combobox"
                            style="opacity: 0;"
                            type="search"
                            unselectable="on"
                            value=""
                          />
                        </span>
                        <span
                          class="ant-select-selection-item"
                        />
                      </div>,
                    }
                  }
                  dropdownClassName=""
                  dropdownMatchSelectWidth={true}
                  emptyOptions={false}
                  inputElement={null}
                  inputIcon={[Function]}
                  key="trigger"
                  loading={false}
                  notFoundContent={
                    <Context.Consumer>
                      [Function]
                    </Context.Consumer>
                  }
                  omitDomProps={
                    Array [
                      "inputValue",
                    ]
                  }
                  onDisplayValuesChange={[Function]}
                  onRemove={[Function]}
                  onSearch={[Function]}
                  onSearchSplit={[Function]}
                  onSearchSubmit={[Function]}
                  onToggleOpen={[Function]}
                  placeholder="select user"
                  placement="bottomLeft"
                  prefixCls="ant-select"
                  removeIcon={<ForwardRef(CloseOutlined) />}
                  searchValue=""
                  showSearch={false}
                  style={
                    Object {
                      "width": 200,
                    }
                  }
                  tokenWithEnter={false}
                  transitionName="ant-slide-up"
                  values={
                    Array [
                      Object {
                        "disabled": undefined,
                        "key": undefined,
                        "label": undefined,
                        "title": undefined,
                        "value": undefined,
                      },
                    ]
                  }
                >
                  <div
                    className="ant-select-selector"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                  >
                    <SingleSelector
                      OptionList={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "displayName": "OptionList",
                          "render": [Function],
                        }
                      }
                      activeDescendantId="undefined_list_0"
                      activeValue={null}
                      autoClearSearchValue={true}
                      className=""
                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                      disabled={false}
                      displayValues={
                        Array [
                          Object {
                            "disabled": undefined,
                            "key": undefined,
                            "label": undefined,
                            "title": undefined,
                            "value": undefined,
                          },
                        ]
                      }
                      domRef={
                        Object {
                          "current": <div
                            class="ant-select-selector"
                          >
                            <span
                              class="ant-select-selection-search"
                            >
                              <input
                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                aria-autocomplete="list"
                                aria-controls="rc_select_TEST_OR_SSR_list"
                                aria-haspopup="listbox"
                                aria-owns="rc_select_TEST_OR_SSR_list"
                                autocomplete="off"
                                class="ant-select-selection-search-input"
                                id="rc_select_TEST_OR_SSR"
                                readonly=""
                                role="combobox"
                                style="opacity: 0;"
                                type="search"
                                unselectable="on"
                                value=""
                              />
                            </span>
                            <span
                              class="ant-select-selection-item"
                            />
                          </div>,
                        }
                      }
                      dropdownClassName=""
                      dropdownMatchSelectWidth={true}
                      emptyOptions={false}
                      inputElement={null}
                      inputIcon={[Function]}
                      inputRef={
                        Object {
                          "current": <input
                            aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                            aria-autocomplete="list"
                            aria-controls="rc_select_TEST_OR_SSR_list"
                            aria-haspopup="listbox"
                            aria-owns="rc_select_TEST_OR_SSR_list"
                            autocomplete="off"
                            class="ant-select-selection-search-input"
                            id="rc_select_TEST_OR_SSR"
                            readonly=""
                            role="combobox"
                            style="opacity: 0;"
                            type="search"
                            unselectable="on"
                            value=""
                          />,
                        }
                      }
                      loading={false}
                      notFoundContent={
                        <Context.Consumer>
                          [Function]
                        </Context.Consumer>
                      }
                      omitDomProps={
                        Array [
                          "inputValue",
                        ]
                      }
                      onDisplayValuesChange={[Function]}
                      onInputChange={[Function]}
                      onInputCompositionEnd={[Function]}
                      onInputCompositionStart={[Function]}
                      onInputKeyDown={[Function]}
                      onInputMouseDown={[Function]}
                      onInputPaste={[Function]}
                      onRemove={[Function]}
                      onSearch={[Function]}
                      onSearchSplit={[Function]}
                      onSearchSubmit={[Function]}
                      onToggleOpen={[Function]}
                      placeholder="select user"
                      placement="bottomLeft"
                      prefixCls="ant-select"
                      removeIcon={<ForwardRef(CloseOutlined) />}
                      searchValue=""
                      showSearch={false}
                      style={
                        Object {
                          "width": 200,
                        }
                      }
                      tokenWithEnter={false}
                      transitionName="ant-slide-up"
                      values={
                        Array [
                          Object {
                            "disabled": undefined,
                            "key": undefined,
                            "label": undefined,
                            "title": undefined,
                            "value": undefined,
                          },
                        ]
                      }
                    >
                      <span
                        className="ant-select-selection-search"
                      >
                        <Input
                          activeDescendantId="undefined_list_0"
                          attrs={Object {}}
                          disabled={false}
                          editable={false}
                          inputElement={null}
                          onChange={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onPaste={[Function]}
                          prefixCls="ant-select"
                          value=""
                        >
                          <input
                            aria-activedescendant="undefined_list_0"
                            aria-autocomplete="list"
                            aria-controls="undefined_list"
                            aria-haspopup="listbox"
                            aria-owns="undefined_list"
                            autoComplete="off"
                            className="ant-select-selection-search-input"
                            disabled={false}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            readOnly={true}
                            role="combobox"
                            style={
                              Object {
                                "opacity": 0,
                              }
                            }
                            type="search"
                            unselectable="on"
                            value=""
                          />
                        </Input>
                      </span>
                      <span
                        className="ant-select-selection-item"
                      />
                    </SingleSelector>
                  </div>
                </Selector>
              </Trigger>
            </SelectTrigger>
            <TransBtn
              className="ant-select-arrow"
              customizeIcon={[Function]}
              customizeIconProps={
                Object {
                  "focused": false,
                  "loading": false,
                  "open": undefined,
                  "searchValue": "",
                  "showSearch": false,
                }
              }
            >
              <span
                aria-hidden={true}
                className="ant-select-arrow"
                onMouseDown={[Function]}
                style={
                  Object {
                    "WebkitUserSelect": "none",
                    "userSelect": "none",
                  }
                }
                unselectable="on"
              >
                <ForwardRef(DownOutlined)
                  className="ant-select-suffix"
                >
                  <AntdIcon
                    className="ant-select-suffix"
                    icon={
                      Object {
                        "icon": Object {
                          "attrs": Object {
                            "focusable": "false",
                            "viewBox": "64 64 896 896",
                          },
                          "children": Array [
                            Object {
                              "attrs": Object {
                                "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                              },
                              "tag": "path",
                            },
                          ],
                          "tag": "svg",
                        },
                        "name": "down",
                        "theme": "outlined",
                      }
                    }
                  >
                    <span
                      aria-label="down"
                      className="anticon anticon-down ant-select-suffix"
                      role="img"
                    >
                      <IconReact
                        icon={
                          Object {
                            "icon": Object {
                              "attrs": Object {
                                "focusable": "false",
                                "viewBox": "64 64 896 896",
                              },
                              "children": Array [
                                Object {
                                  "attrs": Object {
                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                  },
                                  "tag": "path",
                                },
                              ],
                              "tag": "svg",
                            },
                            "name": "down",
                            "theme": "outlined",
                          }
                        }
                      >
                        <svg
                          aria-hidden="true"
                          data-icon="down"
                          fill="currentColor"
                          focusable="false"
                          height="1em"
                          key="svg-down"
                          viewBox="64 64 896 896"
                          width="1em"
                        >
                          <path
                            d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                            key="svg-down-svg-0"
                          />
                        </svg>
                      </IconReact>
                    </span>
                  </AntdIcon>
                </ForwardRef(DownOutlined)>
              </span>
            </TransBtn>
          </div>
        </BaseSelect>
      </Select>
    </ForwardRef(InternalSelect)>
  </Selector>
</Provider>
`;

exports[`Categories List component Snapshot testing should render the component with no data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Selector>
    <ForwardRef(InternalSelect)
      bordered={true}
      defaultValue={
        Array [
          undefined,
        ]
      }
      filterOption={[Function]}
      listHeight={128}
      loading={false}
      onChange={[Function]}
      placeholder="select user"
      style={
        Object {
          "width": 200,
        }
      }
    >
      <Select
        className=""
        clearIcon={<ForwardRef(CloseCircleFilled) />}
        defaultValue={
          Array [
            undefined,
          ]
        }
        disabled={false}
        dropdownClassName=""
        filterOption={[Function]}
        inputIcon={[Function]}
        listHeight={128}
        listItemHeight={24}
        loading={false}
        menuItemSelectedIcon={null}
        notFoundContent={
          <Context.Consumer>
            [Function]
          </Context.Consumer>
        }
        onChange={[Function]}
        placeholder="select user"
        placement="bottomLeft"
        prefixCls="ant-select"
        removeIcon={<ForwardRef(CloseOutlined) />}
        style={
          Object {
            "width": 200,
          }
        }
        transitionName="ant-slide-up"
      >
        <BaseSelect
          OptionList={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "OptionList",
              "render": [Function],
            }
          }
          activeDescendantId="undefined_list_0"
          activeValue={null}
          autoClearSearchValue={true}
          className=""
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          displayValues={
            Array [
              Object {
                "disabled": undefined,
                "key": undefined,
                "label": undefined,
                "title": undefined,
                "value": undefined,
              },
            ]
          }
          dropdownClassName=""
          dropdownMatchSelectWidth={true}
          emptyOptions={true}
          inputIcon={[Function]}
          loading={false}
          notFoundContent={
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          }
          omitDomProps={
            Array [
              "inputValue",
            ]
          }
          onDisplayValuesChange={[Function]}
          onSearch={[Function]}
          onSearchSplit={[Function]}
          placeholder="select user"
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          searchValue=""
          style={
            Object {
              "width": 200,
            }
          }
          transitionName="ant-slide-up"
        >
          <div
            className="ant-select ant-select-single ant-select-show-arrow"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            style={
              Object {
                "width": 200,
              }
            }
          >
            <SelectTrigger
              containerWidth={null}
              disabled={false}
              dropdownClassName=""
              dropdownMatchSelectWidth={true}
              empty={true}
              getTriggerDOMNode={[Function]}
              onPopupMouseEnter={[Function]}
              placement="bottomLeft"
              popupElement={<ForwardRef(OptionList) />}
              prefixCls="ant-select"
              transitionName="ant-slide-up"
            >
              <Trigger
                action={Array []}
                afterPopupVisibleChange={[Function]}
                autoDestroy={false}
                blurDelay={0.15}
                builtinPlacements={
                  Object {
                    "bottomLeft": Object {
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tl",
                        "bl",
                      ],
                    },
                    "bottomRight": Object {
                      "offset": Array [
                        0,
                        4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "tr",
                        "br",
                      ],
                    },
                    "topLeft": Object {
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "bl",
                        "tl",
                      ],
                    },
                    "topRight": Object {
                      "offset": Array [
                        0,
                        -4,
                      ],
                      "overflow": Object {
                        "adjustX": 0,
                        "adjustY": 1,
                      },
                      "points": Array [
                        "br",
                        "tr",
                      ],
                    },
                  }
                }
                defaultPopupVisible={false}
                destroyPopupOnHide={false}
                focusDelay={0}
                getDocument={[Function]}
                getPopupClassNameFromAlign={[Function]}
                getTriggerDOMNode={[Function]}
                hideAction={Array []}
                mask={false}
                maskClosable={true}
                mouseEnterDelay={0}
                mouseLeaveDelay={0.1}
                onPopupAlign={[Function]}
                onPopupVisibleChange={[Function]}
                popup={
                  <div
                    onMouseEnter={[Function]}
                  >
                    <ForwardRef(OptionList) />
                  </div>
                }
                popupAlign={Object {}}
                popupClassName="ant-select-dropdown-empty"
                popupPlacement="bottomLeft"
                popupStyle={
                  Object {
                    "minWidth": null,
                    "width": null,
                  }
                }
                popupTransitionName="ant-slide-up"
                prefixCls="ant-select-dropdown"
                showAction={Array []}
              >
                <Selector
                  OptionList={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "displayName": "OptionList",
                      "render": [Function],
                    }
                  }
                  activeDescendantId="undefined_list_0"
                  activeValue={null}
                  autoClearSearchValue={true}
                  className=""
                  clearIcon={<ForwardRef(CloseCircleFilled) />}
                  disabled={false}
                  displayValues={
                    Array [
                      Object {
                        "disabled": undefined,
                        "key": undefined,
                        "label": undefined,
                        "title": undefined,
                        "value": undefined,
                      },
                    ]
                  }
                  domRef={
                    Object {
                      "current": <div
                        class="ant-select-selector"
                      >
                        <span
                          class="ant-select-selection-search"
                        >
                          <input
                            aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                            aria-autocomplete="list"
                            aria-controls="rc_select_TEST_OR_SSR_list"
                            aria-haspopup="listbox"
                            aria-owns="rc_select_TEST_OR_SSR_list"
                            autocomplete="off"
                            class="ant-select-selection-search-input"
                            id="rc_select_TEST_OR_SSR"
                            readonly=""
                            role="combobox"
                            style="opacity: 0;"
                            type="search"
                            unselectable="on"
                            value=""
                          />
                        </span>
                        <span
                          class="ant-select-selection-item"
                        />
                      </div>,
                    }
                  }
                  dropdownClassName=""
                  dropdownMatchSelectWidth={true}
                  emptyOptions={true}
                  inputElement={null}
                  inputIcon={[Function]}
                  key="trigger"
                  loading={false}
                  notFoundContent={
                    <Context.Consumer>
                      [Function]
                    </Context.Consumer>
                  }
                  omitDomProps={
                    Array [
                      "inputValue",
                    ]
                  }
                  onDisplayValuesChange={[Function]}
                  onRemove={[Function]}
                  onSearch={[Function]}
                  onSearchSplit={[Function]}
                  onSearchSubmit={[Function]}
                  onToggleOpen={[Function]}
                  placeholder="select user"
                  placement="bottomLeft"
                  prefixCls="ant-select"
                  removeIcon={<ForwardRef(CloseOutlined) />}
                  searchValue=""
                  showSearch={false}
                  style={
                    Object {
                      "width": 200,
                    }
                  }
                  tokenWithEnter={false}
                  transitionName="ant-slide-up"
                  values={
                    Array [
                      Object {
                        "disabled": undefined,
                        "key": undefined,
                        "label": undefined,
                        "title": undefined,
                        "value": undefined,
                      },
                    ]
                  }
                >
                  <div
                    className="ant-select-selector"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                  >
                    <SingleSelector
                      OptionList={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "displayName": "OptionList",
                          "render": [Function],
                        }
                      }
                      activeDescendantId="undefined_list_0"
                      activeValue={null}
                      autoClearSearchValue={true}
                      className=""
                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                      disabled={false}
                      displayValues={
                        Array [
                          Object {
                            "disabled": undefined,
                            "key": undefined,
                            "label": undefined,
                            "title": undefined,
                            "value": undefined,
                          },
                        ]
                      }
                      domRef={
                        Object {
                          "current": <div
                            class="ant-select-selector"
                          >
                            <span
                              class="ant-select-selection-search"
                            >
                              <input
                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                aria-autocomplete="list"
                                aria-controls="rc_select_TEST_OR_SSR_list"
                                aria-haspopup="listbox"
                                aria-owns="rc_select_TEST_OR_SSR_list"
                                autocomplete="off"
                                class="ant-select-selection-search-input"
                                id="rc_select_TEST_OR_SSR"
                                readonly=""
                                role="combobox"
                                style="opacity: 0;"
                                type="search"
                                unselectable="on"
                                value=""
                              />
                            </span>
                            <span
                              class="ant-select-selection-item"
                            />
                          </div>,
                        }
                      }
                      dropdownClassName=""
                      dropdownMatchSelectWidth={true}
                      emptyOptions={true}
                      inputElement={null}
                      inputIcon={[Function]}
                      inputRef={
                        Object {
                          "current": <input
                            aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                            aria-autocomplete="list"
                            aria-controls="rc_select_TEST_OR_SSR_list"
                            aria-haspopup="listbox"
                            aria-owns="rc_select_TEST_OR_SSR_list"
                            autocomplete="off"
                            class="ant-select-selection-search-input"
                            id="rc_select_TEST_OR_SSR"
                            readonly=""
                            role="combobox"
                            style="opacity: 0;"
                            type="search"
                            unselectable="on"
                            value=""
                          />,
                        }
                      }
                      loading={false}
                      notFoundContent={
                        <Context.Consumer>
                          [Function]
                        </Context.Consumer>
                      }
                      omitDomProps={
                        Array [
                          "inputValue",
                        ]
                      }
                      onDisplayValuesChange={[Function]}
                      onInputChange={[Function]}
                      onInputCompositionEnd={[Function]}
                      onInputCompositionStart={[Function]}
                      onInputKeyDown={[Function]}
                      onInputMouseDown={[Function]}
                      onInputPaste={[Function]}
                      onRemove={[Function]}
                      onSearch={[Function]}
                      onSearchSplit={[Function]}
                      onSearchSubmit={[Function]}
                      onToggleOpen={[Function]}
                      placeholder="select user"
                      placement="bottomLeft"
                      prefixCls="ant-select"
                      removeIcon={<ForwardRef(CloseOutlined) />}
                      searchValue=""
                      showSearch={false}
                      style={
                        Object {
                          "width": 200,
                        }
                      }
                      tokenWithEnter={false}
                      transitionName="ant-slide-up"
                      values={
                        Array [
                          Object {
                            "disabled": undefined,
                            "key": undefined,
                            "label": undefined,
                            "title": undefined,
                            "value": undefined,
                          },
                        ]
                      }
                    >
                      <span
                        className="ant-select-selection-search"
                      >
                        <Input
                          activeDescendantId="undefined_list_0"
                          attrs={Object {}}
                          disabled={false}
                          editable={false}
                          inputElement={null}
                          onChange={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onPaste={[Function]}
                          prefixCls="ant-select"
                          value=""
                        >
                          <input
                            aria-activedescendant="undefined_list_0"
                            aria-autocomplete="list"
                            aria-controls="undefined_list"
                            aria-haspopup="listbox"
                            aria-owns="undefined_list"
                            autoComplete="off"
                            className="ant-select-selection-search-input"
                            disabled={false}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            readOnly={true}
                            role="combobox"
                            style={
                              Object {
                                "opacity": 0,
                              }
                            }
                            type="search"
                            unselectable="on"
                            value=""
                          />
                        </Input>
                      </span>
                      <span
                        className="ant-select-selection-item"
                      />
                    </SingleSelector>
                  </div>
                </Selector>
              </Trigger>
            </SelectTrigger>
            <TransBtn
              className="ant-select-arrow"
              customizeIcon={[Function]}
              customizeIconProps={
                Object {
                  "focused": false,
                  "loading": false,
                  "open": undefined,
                  "searchValue": "",
                  "showSearch": false,
                }
              }
            >
              <span
                aria-hidden={true}
                className="ant-select-arrow"
                onMouseDown={[Function]}
                style={
                  Object {
                    "WebkitUserSelect": "none",
                    "userSelect": "none",
                  }
                }
                unselectable="on"
              >
                <ForwardRef(DownOutlined)
                  className="ant-select-suffix"
                >
                  <AntdIcon
                    className="ant-select-suffix"
                    icon={
                      Object {
                        "icon": Object {
                          "attrs": Object {
                            "focusable": "false",
                            "viewBox": "64 64 896 896",
                          },
                          "children": Array [
                            Object {
                              "attrs": Object {
                                "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                              },
                              "tag": "path",
                            },
                          ],
                          "tag": "svg",
                        },
                        "name": "down",
                        "theme": "outlined",
                      }
                    }
                  >
                    <span
                      aria-label="down"
                      className="anticon anticon-down ant-select-suffix"
                      role="img"
                    >
                      <IconReact
                        icon={
                          Object {
                            "icon": Object {
                              "attrs": Object {
                                "focusable": "false",
                                "viewBox": "64 64 896 896",
                              },
                              "children": Array [
                                Object {
                                  "attrs": Object {
                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                  },
                                  "tag": "path",
                                },
                              ],
                              "tag": "svg",
                            },
                            "name": "down",
                            "theme": "outlined",
                          }
                        }
                      >
                        <svg
                          aria-hidden="true"
                          data-icon="down"
                          fill="currentColor"
                          focusable="false"
                          height="1em"
                          key="svg-down"
                          viewBox="64 64 896 896"
                          width="1em"
                        >
                          <path
                            d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                            key="svg-down-svg-0"
                          />
                        </svg>
                      </IconReact>
                    </span>
                  </AntdIcon>
                </ForwardRef(DownOutlined)>
              </span>
            </TransBtn>
          </div>
        </BaseSelect>
      </Select>
    </ForwardRef(InternalSelect)>
  </Selector>
</Provider>
`;
