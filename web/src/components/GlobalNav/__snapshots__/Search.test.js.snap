// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Account Menu component should call Select with enter 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Search>
    <ForwardRef(AutoComplete)
      onSearch={[Function]}
      onSelect={[Function]}
      options={
        Array [
          Object {
            "value": "test",
          },
          Object {
            "value": "testtest",
          },
          Object {
            "value": "testtesttest",
          },
        ]
      }
      placeholder="Search..."
      style={
        Object {
          "width": 400,
        }
      }
    >
      <ForwardRef(InternalSelect)
        className="ant-select-auto-complete"
        mode="SECRET_COMBOBOX_MODE_DO_NOT_USE"
        onSearch={[Function]}
        onSelect={[Function]}
        options={
          Array [
            Object {
              "value": "test",
            },
            Object {
              "value": "testtest",
            },
            Object {
              "value": "testtesttest",
            },
          ]
        }
        placeholder="Search..."
        prefixCls="ant-select"
        style={
          Object {
            "width": 400,
          }
        }
      >
        <Select
          className="ant-select-auto-complete"
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          dropdownClassName=""
          inputIcon={[Function]}
          listHeight={256}
          listItemHeight={24}
          menuItemSelectedIcon={null}
          mode="combobox"
          notFoundContent={null}
          onSearch={[Function]}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "value": "test",
              },
              Object {
                "value": "testtest",
              },
              Object {
                "value": "testtesttest",
              },
            ]
          }
          placeholder="Search..."
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          style={
            Object {
              "width": 400,
            }
          }
          transitionName="ant-slide-up"
        >
          <BaseSelect
            OptionList={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "OptionList",
                "render": [Function],
              }
            }
            activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
            activeValue={null}
            autoClearSearchValue={true}
            className="ant-select-auto-complete"
            clearIcon={<ForwardRef(CloseCircleFilled) />}
            disabled={false}
            displayValues={
              Array [
                Object {
                  "disabled": undefined,
                  "key": "test",
                  "label": "test",
                  "title": undefined,
                  "value": "test",
                },
              ]
            }
            dropdownClassName=""
            dropdownMatchSelectWidth={true}
            emptyOptions={false}
            id="rc_select_TEST_OR_SSR"
            inputIcon={[Function]}
            mode="combobox"
            notFoundContent={null}
            omitDomProps={
              Array [
                "inputValue",
              ]
            }
            onDisplayValuesChange={[Function]}
            onSearch={[Function]}
            onSearchSplit={[Function]}
            placeholder="Search..."
            placement="bottomLeft"
            prefixCls="ant-select"
            removeIcon={<ForwardRef(CloseOutlined) />}
            searchValue="test"
            style={
              Object {
                "width": 400,
              }
            }
            transitionName="ant-slide-up"
          >
            <div
              className="ant-select ant-select-auto-complete ant-select-single ant-select-open ant-select-show-search"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              style={
                Object {
                  "width": 400,
                }
              }
            >
              <SelectTrigger
                containerWidth={0}
                disabled={false}
                dropdownClassName=""
                dropdownMatchSelectWidth={true}
                empty={false}
                getTriggerDOMNode={[Function]}
                onPopupMouseEnter={[Function]}
                placement="bottomLeft"
                popupElement={<ForwardRef(OptionList) />}
                prefixCls="ant-select"
                transitionName="ant-slide-up"
                visible={true}
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "bottomRight": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                      "topRight": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  getTriggerDOMNode={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  popup={
                    <div
                      onMouseEnter={[Function]}
                    >
                      <ForwardRef(OptionList) />
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName=""
                  popupPlacement="bottomLeft"
                  popupStyle={
                    Object {
                      "minWidth": 0,
                      "width": 0,
                    }
                  }
                  popupTransitionName="ant-slide-up"
                  popupVisible={true}
                  prefixCls="ant-select-dropdown"
                  showAction={Array []}
                >
                  <Selector
                    OptionList={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "displayName": "OptionList",
                        "render": [Function],
                      }
                    }
                    activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
                    activeValue={null}
                    autoClearSearchValue={true}
                    className="ant-select-auto-complete"
                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                    disabled={false}
                    displayValues={
                      Array [
                        Object {
                          "disabled": undefined,
                          "key": "test",
                          "label": "test",
                          "title": undefined,
                          "value": "test",
                        },
                      ]
                    }
                    domRef={
                      Object {
                        "current": <div
                          class="ant-select-selector"
                        >
                          <span
                            class="ant-select-selection-search"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded="true"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value="test"
                            />
                          </span>
                        </div>,
                      }
                    }
                    dropdownClassName=""
                    dropdownMatchSelectWidth={true}
                    emptyOptions={false}
                    id="rc_select_TEST_OR_SSR"
                    inputElement={null}
                    inputIcon={[Function]}
                    key="trigger"
                    mode="combobox"
                    notFoundContent={null}
                    omitDomProps={
                      Array [
                        "inputValue",
                      ]
                    }
                    onDisplayValuesChange={[Function]}
                    onRemove={[Function]}
                    onSearch={[Function]}
                    onSearchSplit={[Function]}
                    onSearchSubmit={[Function]}
                    onToggleOpen={[Function]}
                    open={true}
                    placeholder="Search..."
                    placement="bottomLeft"
                    prefixCls="ant-select"
                    removeIcon={<ForwardRef(CloseOutlined) />}
                    searchValue="test"
                    showSearch={true}
                    style={
                      Object {
                        "width": 400,
                      }
                    }
                    tokenWithEnter={false}
                    transitionName="ant-slide-up"
                    values={
                      Array [
                        Object {
                          "disabled": undefined,
                          "key": "test",
                          "label": "test",
                          "title": undefined,
                          "value": "test",
                        },
                      ]
                    }
                  >
                    <div
                      className="ant-select-selector"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <SingleSelector
                        OptionList={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "displayName": "OptionList",
                            "render": [Function],
                          }
                        }
                        activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
                        activeValue={null}
                        autoClearSearchValue={true}
                        className="ant-select-auto-complete"
                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                        disabled={false}
                        displayValues={
                          Array [
                            Object {
                              "disabled": undefined,
                              "key": "test",
                              "label": "test",
                              "title": undefined,
                              "value": "test",
                            },
                          ]
                        }
                        domRef={
                          Object {
                            "current": <div
                              class="ant-select-selector"
                            >
                              <span
                                class="ant-select-selection-search"
                              >
                                <input
                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                                  aria-autocomplete="list"
                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                  aria-expanded="true"
                                  aria-haspopup="listbox"
                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                  autocomplete="off"
                                  class="ant-select-selection-search-input"
                                  id="rc_select_TEST_OR_SSR"
                                  role="combobox"
                                  type="search"
                                  value="test"
                                />
                              </span>
                            </div>,
                          }
                        }
                        dropdownClassName=""
                        dropdownMatchSelectWidth={true}
                        emptyOptions={false}
                        id="rc_select_TEST_OR_SSR"
                        inputElement={null}
                        inputIcon={[Function]}
                        inputRef={
                          Object {
                            "current": <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded="true"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value="test"
                            />,
                          }
                        }
                        mode="combobox"
                        notFoundContent={null}
                        omitDomProps={
                          Array [
                            "inputValue",
                          ]
                        }
                        onDisplayValuesChange={[Function]}
                        onInputChange={[Function]}
                        onInputCompositionEnd={[Function]}
                        onInputCompositionStart={[Function]}
                        onInputKeyDown={[Function]}
                        onInputMouseDown={[Function]}
                        onInputPaste={[Function]}
                        onRemove={[Function]}
                        onSearch={[Function]}
                        onSearchSplit={[Function]}
                        onSearchSubmit={[Function]}
                        onToggleOpen={[Function]}
                        open={true}
                        placeholder="Search..."
                        placement="bottomLeft"
                        prefixCls="ant-select"
                        removeIcon={<ForwardRef(CloseOutlined) />}
                        searchValue="test"
                        showSearch={true}
                        style={
                          Object {
                            "width": 400,
                          }
                        }
                        tokenWithEnter={false}
                        transitionName="ant-slide-up"
                        values={
                          Array [
                            Object {
                              "disabled": undefined,
                              "key": "test",
                              "label": "test",
                              "title": undefined,
                              "value": "test",
                            },
                          ]
                        }
                      >
                        <span
                          className="ant-select-selection-search"
                        >
                          <Input
                            activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
                            attrs={Object {}}
                            disabled={false}
                            editable={true}
                            id="rc_select_TEST_OR_SSR"
                            inputElement={null}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            open={true}
                            prefixCls="ant-select"
                            value="test"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded={true}
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autoComplete="off"
                              className="ant-select-selection-search-input"
                              disabled={false}
                              id="rc_select_TEST_OR_SSR"
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onKeyDown={[Function]}
                              onMouseDown={[Function]}
                              onPaste={[Function]}
                              readOnly={false}
                              role="combobox"
                              style={
                                Object {
                                  "opacity": null,
                                }
                              }
                              type="search"
                              unselectable={null}
                              value="test"
                            />
                          </Input>
                        </span>
                      </SingleSelector>
                    </div>
                  </Selector>
                  <ForwardRef
                    didUpdate={[Function]}
                    getContainer={[Function]}
                    key="portal"
                  >
                    <Portal
                      containerInfo={
                        <div
                          style="position: absolute; top: 0px; left: 0px; width: 100%;"
                        >
                          <div>
                            <div
                              class="ant-select-dropdown"
                              style="opacity: 0; min-width: 0; width: 0px;"
                            >
                              <div>
                                <div
                                  id="rc_select_TEST_OR_SSR_list"
                                  role="listbox"
                                  style="height: 0px; width: 0px; overflow: hidden;"
                                >
                                  <div
                                    aria-selected="false"
                                    id="rc_select_TEST_OR_SSR_list_0"
                                    role="option"
                                  >
                                    test
                                  </div>
                                </div>
                                <div
                                  class="rc-virtual-list"
                                  style="position: relative;"
                                >
                                  <div
                                    class="rc-virtual-list-holder"
                                    style="max-height: 256px; overflow-y: hidden;"
                                  >
                                    <div>
                                      <div
                                        class="rc-virtual-list-holder-inner"
                                        style="display: flex; flex-direction: column;"
                                      >
                                        <div
                                          aria-selected="false"
                                          class="ant-select-item ant-select-item-option"
                                          title="test"
                                        >
                                          <div
                                            class="ant-select-item-option-content"
                                          >
                                            test
                                          </div>
                                          <span
                                            aria-hidden="true"
                                            class="ant-select-item-option-state"
                                            style="user-select: none;"
                                            unselectable="on"
                                          />
                                        </div>
                                        <div
                                          aria-selected="false"
                                          class="ant-select-item ant-select-item-option"
                                          title="testtest"
                                        >
                                          <div
                                            class="ant-select-item-option-content"
                                          >
                                            testtest
                                          </div>
                                          <span
                                            aria-hidden="true"
                                            class="ant-select-item-option-state"
                                            style="user-select: none;"
                                            unselectable="on"
                                          />
                                        </div>
                                        <div
                                          aria-selected="false"
                                          class="ant-select-item ant-select-item-option"
                                          title="testtesttest"
                                        >
                                          <div
                                            class="ant-select-item-option-content"
                                          >
                                            testtesttest
                                          </div>
                                          <span
                                            aria-hidden="true"
                                            class="ant-select-item-option-state"
                                            style="user-select: none;"
                                            unselectable="on"
                                          />
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    class="rc-virtual-list-scrollbar"
                                    style="width: 8px; top: 0px; bottom: 0px; right: 0px; position: absolute; display: none;"
                                  >
                                    <div
                                      class="rc-virtual-list-scrollbar-thumb"
                                      style="width: 100%; height: 128px; top: 0px; left: 0px; position: absolute; background: rgba(0, 0, 0, 0.5); border-radius: 99px; cursor: pointer; user-select: none;"
                                    />
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                    >
                      <Popup
                        align={
                          Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 0,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tl",
                              "bl",
                            ],
                          }
                        }
                        className=""
                        destroyPopupOnHide={false}
                        getClassNameFromAlign={[Function]}
                        getRootDomNode={[Function]}
                        mask={false}
                        onAlign={[Function]}
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                        prefixCls="ant-select-dropdown"
                        style={
                          Object {
                            "minWidth": 0,
                            "width": 0,
                          }
                        }
                        transitionName="ant-slide-up"
                        visible={true}
                      >
                        <div>
                          <Mask
                            align={
                              Object {
                                "offset": Array [
                                  0,
                                  4,
                                ],
                                "overflow": Object {
                                  "adjustX": 0,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "tl",
                                  "bl",
                                ],
                              }
                            }
                            className=""
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-select-dropdown"
                            style={
                              Object {
                                "minWidth": 0,
                                "width": 0,
                              }
                            }
                            transitionName="ant-slide-up"
                            visible={true}
                          />
                          <PopupInner
                            align={
                              Object {
                                "offset": Array [
                                  0,
                                  4,
                                ],
                                "overflow": Object {
                                  "adjustX": 0,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "tl",
                                  "bl",
                                ],
                              }
                            }
                            className=""
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-select-dropdown"
                            style={
                              Object {
                                "minWidth": 0,
                                "width": 0,
                              }
                            }
                            transitionName="ant-slide-up"
                            visible={true}
                          >
                            <CSSMotion
                              leavedClassName="ant-select-dropdown-hidden"
                              motionName="ant-slide-up"
                              onAppearEnd={[Function]}
                              onAppearPrepare={[Function]}
                              onEnterEnd={[Function]}
                              onEnterPrepare={[Function]}
                              onLeaveEnd={[Function]}
                              removeOnLeave={false}
                              visible={true}
                            >
                              <DomWrapper>
                                <Align
                                  align={
                                    Object {
                                      "offset": Array [
                                        0,
                                        4,
                                      ],
                                      "overflow": Object {
                                        "adjustX": 0,
                                        "adjustY": 1,
                                      },
                                      "points": Array [
                                        "tl",
                                        "bl",
                                      ],
                                    }
                                  }
                                  disabled={true}
                                  key="popup"
                                  monitorWindowResize={true}
                                  onAlign={[Function]}
                                  target={[Function]}
                                >
                                  <div
                                    className="ant-select-dropdown"
                                    onMouseDownCapture={[Function]}
                                    onTouchStartCapture={[Function]}
                                    style={
                                      Object {
                                        "minWidth": 0,
                                        "opacity": 0,
                                        "pointerEvents": undefined,
                                        "width": 0,
                                        "zIndex": undefined,
                                      }
                                    }
                                  >
                                    <div
                                      onMouseEnter={[Function]}
                                    >
                                      <OptionList>
                                        <div
                                          id="rc_select_TEST_OR_SSR_list"
                                          role="listbox"
                                          style={
                                            Object {
                                              "height": 0,
                                              "overflow": "hidden",
                                              "width": 0,
                                            }
                                          }
                                        >
                                          <div
                                            aria-label={null}
                                            aria-selected={false}
                                            id="rc_select_TEST_OR_SSR_list_0"
                                            key="0"
                                            role="option"
                                          >
                                            test
                                          </div>
                                        </div>
                                        <List
                                          data={
                                            Array [
                                              Object {
                                                "data": Object {
                                                  "value": "test",
                                                },
                                                "groupOption": false,
                                                "key": "test",
                                                "label": undefined,
                                                "value": "test",
                                              },
                                              Object {
                                                "data": Object {
                                                  "value": "testtest",
                                                },
                                                "groupOption": false,
                                                "key": "testtest",
                                                "label": undefined,
                                                "value": "testtest",
                                              },
                                              Object {
                                                "data": Object {
                                                  "value": "testtesttest",
                                                },
                                                "groupOption": false,
                                                "key": "testtesttest",
                                                "label": undefined,
                                                "value": "testtesttest",
                                              },
                                            ]
                                          }
                                          fullHeight={false}
                                          height={256}
                                          itemHeight={24}
                                          itemKey="key"
                                          onMouseDown={[Function]}
                                          virtual={true}
                                        >
                                          <div
                                            className="rc-virtual-list"
                                            onMouseDown={[Function]}
                                            style={
                                              Object {
                                                "position": "relative",
                                              }
                                            }
                                          >
                                            <div
                                              className="rc-virtual-list-holder"
                                              onScroll={[Function]}
                                              style={
                                                Object {
                                                  "maxHeight": 256,
                                                  "overflowAnchor": "none",
                                                  "overflowY": "hidden",
                                                }
                                              }
                                            >
                                              <Filler
                                                height={0}
                                                onInnerResize={[Function]}
                                                prefixCls="rc-virtual-list"
                                              >
                                                <div
                                                  style={Object {}}
                                                >
                                                  <ResizeObserver
                                                    onResize={[Function]}
                                                  >
                                                    <SingleObserver
                                                      key="rc-observer-key-0"
                                                      onResize={[Function]}
                                                    >
                                                      <DomWrapper>
                                                        <div
                                                          className="rc-virtual-list-holder-inner"
                                                          style={
                                                            Object {
                                                              "display": "flex",
                                                              "flexDirection": "column",
                                                            }
                                                          }
                                                        >
                                                          <Item
                                                            key="test"
                                                            setRef={[Function]}
                                                          >
                                                            <div
                                                              aria-selected={false}
                                                              className="ant-select-item ant-select-item-option"
                                                              onClick={[Function]}
                                                              onMouseMove={[Function]}
                                                              title="test"
                                                            >
                                                              <div
                                                                className="ant-select-item-option-content"
                                                              >
                                                                test
                                                              </div>
                                                              <TransBtn
                                                                className="ant-select-item-option-state"
                                                                customizeIcon={null}
                                                                customizeIconProps={
                                                                  Object {
                                                                    "isSelected": false,
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-hidden={true}
                                                                  className="ant-select-item-option-state"
                                                                  onMouseDown={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                />
                                                              </TransBtn>
                                                            </div>
                                                          </Item>
                                                          <Item
                                                            key="testtest"
                                                            setRef={[Function]}
                                                          >
                                                            <div
                                                              aria-selected={false}
                                                              className="ant-select-item ant-select-item-option"
                                                              onClick={[Function]}
                                                              onMouseMove={[Function]}
                                                              title="testtest"
                                                            >
                                                              <div
                                                                className="ant-select-item-option-content"
                                                              >
                                                                testtest
                                                              </div>
                                                              <TransBtn
                                                                className="ant-select-item-option-state"
                                                                customizeIcon={null}
                                                                customizeIconProps={
                                                                  Object {
                                                                    "isSelected": false,
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-hidden={true}
                                                                  className="ant-select-item-option-state"
                                                                  onMouseDown={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                />
                                                              </TransBtn>
                                                            </div>
                                                          </Item>
                                                          <Item
                                                            key="testtesttest"
                                                            setRef={[Function]}
                                                          >
                                                            <div
                                                              aria-selected={false}
                                                              className="ant-select-item ant-select-item-option"
                                                              onClick={[Function]}
                                                              onMouseMove={[Function]}
                                                              title="testtesttest"
                                                            >
                                                              <div
                                                                className="ant-select-item-option-content"
                                                              >
                                                                testtesttest
                                                              </div>
                                                              <TransBtn
                                                                className="ant-select-item-option-state"
                                                                customizeIcon={null}
                                                                customizeIconProps={
                                                                  Object {
                                                                    "isSelected": false,
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-hidden={true}
                                                                  className="ant-select-item-option-state"
                                                                  onMouseDown={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                />
                                                              </TransBtn>
                                                            </div>
                                                          </Item>
                                                        </div>
                                                      </DomWrapper>
                                                    </SingleObserver>
                                                  </ResizeObserver>
                                                </div>
                                              </Filler>
                                            </div>
                                            <ScrollBar
                                              count={3}
                                              height={256}
                                              onScroll={[Function]}
                                              onStartMove={[Function]}
                                              onStopMove={[Function]}
                                              prefixCls="rc-virtual-list"
                                              scrollHeight={0}
                                              scrollTop={0}
                                            >
                                              <div
                                                className="rc-virtual-list-scrollbar"
                                                onMouseDown={[Function]}
                                                onMouseMove={[Function]}
                                                style={
                                                  Object {
                                                    "bottom": 0,
                                                    "display": "none",
                                                    "position": "absolute",
                                                    "right": 0,
                                                    "top": 0,
                                                    "width": 8,
                                                  }
                                                }
                                              >
                                                <div
                                                  className="rc-virtual-list-scrollbar-thumb"
                                                  onMouseDown={[Function]}
                                                  style={
                                                    Object {
                                                      "background": "rgba(0, 0, 0, 0.5)",
                                                      "borderRadius": 99,
                                                      "cursor": "pointer",
                                                      "height": 128,
                                                      "left": 0,
                                                      "position": "absolute",
                                                      "top": 0,
                                                      "userSelect": "none",
                                                      "width": "100%",
                                                    }
                                                  }
                                                />
                                              </div>
                                            </ScrollBar>
                                          </div>
                                        </List>
                                      </OptionList>
                                    </div>
                                  </div>
                                </Align>
                              </DomWrapper>
                            </CSSMotion>
                          </PopupInner>
                        </div>
                      </Popup>
                    </Portal>
                  </ForwardRef>
                </Trigger>
              </SelectTrigger>
            </div>
          </BaseSelect>
        </Select>
      </ForwardRef(InternalSelect)>
    </ForwardRef(AutoComplete)>
  </Search>
</Provider>
`;

exports[`Account Menu component should call onSearch 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Search>
    <ForwardRef(AutoComplete)
      onSearch={[Function]}
      onSelect={[Function]}
      options={
        Array [
          Object {
            "value": "test",
          },
          Object {
            "value": "testtest",
          },
          Object {
            "value": "testtesttest",
          },
        ]
      }
      placeholder="Search..."
      style={
        Object {
          "width": 400,
        }
      }
    >
      <ForwardRef(InternalSelect)
        className="ant-select-auto-complete"
        mode="SECRET_COMBOBOX_MODE_DO_NOT_USE"
        onSearch={[Function]}
        onSelect={[Function]}
        options={
          Array [
            Object {
              "value": "test",
            },
            Object {
              "value": "testtest",
            },
            Object {
              "value": "testtesttest",
            },
          ]
        }
        placeholder="Search..."
        prefixCls="ant-select"
        style={
          Object {
            "width": 400,
          }
        }
      >
        <Select
          className="ant-select-auto-complete"
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          dropdownClassName=""
          inputIcon={[Function]}
          listHeight={256}
          listItemHeight={24}
          menuItemSelectedIcon={null}
          mode="combobox"
          notFoundContent={null}
          onSearch={[Function]}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "value": "test",
              },
              Object {
                "value": "testtest",
              },
              Object {
                "value": "testtesttest",
              },
            ]
          }
          placeholder="Search..."
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          style={
            Object {
              "width": 400,
            }
          }
          transitionName="ant-slide-up"
        >
          <BaseSelect
            OptionList={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "OptionList",
                "render": [Function],
              }
            }
            activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
            activeValue={null}
            autoClearSearchValue={true}
            className="ant-select-auto-complete"
            clearIcon={<ForwardRef(CloseCircleFilled) />}
            disabled={false}
            displayValues={
              Array [
                Object {
                  "disabled": undefined,
                  "key": "test",
                  "label": "test",
                  "title": undefined,
                  "value": "test",
                },
              ]
            }
            dropdownClassName=""
            dropdownMatchSelectWidth={true}
            emptyOptions={false}
            id="rc_select_TEST_OR_SSR"
            inputIcon={[Function]}
            mode="combobox"
            notFoundContent={null}
            omitDomProps={
              Array [
                "inputValue",
              ]
            }
            onDisplayValuesChange={[Function]}
            onSearch={[Function]}
            onSearchSplit={[Function]}
            placeholder="Search..."
            placement="bottomLeft"
            prefixCls="ant-select"
            removeIcon={<ForwardRef(CloseOutlined) />}
            searchValue="test"
            style={
              Object {
                "width": 400,
              }
            }
            transitionName="ant-slide-up"
          >
            <div
              className="ant-select ant-select-auto-complete ant-select-single ant-select-open ant-select-show-search"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              style={
                Object {
                  "width": 400,
                }
              }
            >
              <SelectTrigger
                containerWidth={0}
                disabled={false}
                dropdownClassName=""
                dropdownMatchSelectWidth={true}
                empty={false}
                getTriggerDOMNode={[Function]}
                onPopupMouseEnter={[Function]}
                placement="bottomLeft"
                popupElement={<ForwardRef(OptionList) />}
                prefixCls="ant-select"
                transitionName="ant-slide-up"
                visible={true}
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "bottomRight": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                      "topRight": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  getTriggerDOMNode={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  popup={
                    <div
                      onMouseEnter={[Function]}
                    >
                      <ForwardRef(OptionList) />
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName=""
                  popupPlacement="bottomLeft"
                  popupStyle={
                    Object {
                      "minWidth": 0,
                      "width": 0,
                    }
                  }
                  popupTransitionName="ant-slide-up"
                  popupVisible={true}
                  prefixCls="ant-select-dropdown"
                  showAction={Array []}
                >
                  <Selector
                    OptionList={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "displayName": "OptionList",
                        "render": [Function],
                      }
                    }
                    activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
                    activeValue={null}
                    autoClearSearchValue={true}
                    className="ant-select-auto-complete"
                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                    disabled={false}
                    displayValues={
                      Array [
                        Object {
                          "disabled": undefined,
                          "key": "test",
                          "label": "test",
                          "title": undefined,
                          "value": "test",
                        },
                      ]
                    }
                    domRef={
                      Object {
                        "current": <div
                          class="ant-select-selector"
                        >
                          <span
                            class="ant-select-selection-search"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded="true"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value="test"
                            />
                          </span>
                        </div>,
                      }
                    }
                    dropdownClassName=""
                    dropdownMatchSelectWidth={true}
                    emptyOptions={false}
                    id="rc_select_TEST_OR_SSR"
                    inputElement={null}
                    inputIcon={[Function]}
                    key="trigger"
                    mode="combobox"
                    notFoundContent={null}
                    omitDomProps={
                      Array [
                        "inputValue",
                      ]
                    }
                    onDisplayValuesChange={[Function]}
                    onRemove={[Function]}
                    onSearch={[Function]}
                    onSearchSplit={[Function]}
                    onSearchSubmit={[Function]}
                    onToggleOpen={[Function]}
                    open={true}
                    placeholder="Search..."
                    placement="bottomLeft"
                    prefixCls="ant-select"
                    removeIcon={<ForwardRef(CloseOutlined) />}
                    searchValue="test"
                    showSearch={true}
                    style={
                      Object {
                        "width": 400,
                      }
                    }
                    tokenWithEnter={false}
                    transitionName="ant-slide-up"
                    values={
                      Array [
                        Object {
                          "disabled": undefined,
                          "key": "test",
                          "label": "test",
                          "title": undefined,
                          "value": "test",
                        },
                      ]
                    }
                  >
                    <div
                      className="ant-select-selector"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <SingleSelector
                        OptionList={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "displayName": "OptionList",
                            "render": [Function],
                          }
                        }
                        activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
                        activeValue={null}
                        autoClearSearchValue={true}
                        className="ant-select-auto-complete"
                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                        disabled={false}
                        displayValues={
                          Array [
                            Object {
                              "disabled": undefined,
                              "key": "test",
                              "label": "test",
                              "title": undefined,
                              "value": "test",
                            },
                          ]
                        }
                        domRef={
                          Object {
                            "current": <div
                              class="ant-select-selector"
                            >
                              <span
                                class="ant-select-selection-search"
                              >
                                <input
                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                                  aria-autocomplete="list"
                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                  aria-expanded="true"
                                  aria-haspopup="listbox"
                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                  autocomplete="off"
                                  class="ant-select-selection-search-input"
                                  id="rc_select_TEST_OR_SSR"
                                  role="combobox"
                                  type="search"
                                  value="test"
                                />
                              </span>
                            </div>,
                          }
                        }
                        dropdownClassName=""
                        dropdownMatchSelectWidth={true}
                        emptyOptions={false}
                        id="rc_select_TEST_OR_SSR"
                        inputElement={null}
                        inputIcon={[Function]}
                        inputRef={
                          Object {
                            "current": <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded="true"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value="test"
                            />,
                          }
                        }
                        mode="combobox"
                        notFoundContent={null}
                        omitDomProps={
                          Array [
                            "inputValue",
                          ]
                        }
                        onDisplayValuesChange={[Function]}
                        onInputChange={[Function]}
                        onInputCompositionEnd={[Function]}
                        onInputCompositionStart={[Function]}
                        onInputKeyDown={[Function]}
                        onInputMouseDown={[Function]}
                        onInputPaste={[Function]}
                        onRemove={[Function]}
                        onSearch={[Function]}
                        onSearchSplit={[Function]}
                        onSearchSubmit={[Function]}
                        onToggleOpen={[Function]}
                        open={true}
                        placeholder="Search..."
                        placement="bottomLeft"
                        prefixCls="ant-select"
                        removeIcon={<ForwardRef(CloseOutlined) />}
                        searchValue="test"
                        showSearch={true}
                        style={
                          Object {
                            "width": 400,
                          }
                        }
                        tokenWithEnter={false}
                        transitionName="ant-slide-up"
                        values={
                          Array [
                            Object {
                              "disabled": undefined,
                              "key": "test",
                              "label": "test",
                              "title": undefined,
                              "value": "test",
                            },
                          ]
                        }
                      >
                        <span
                          className="ant-select-selection-search"
                        >
                          <Input
                            activeDescendantId="rc_select_TEST_OR_SSR_list_-1"
                            attrs={Object {}}
                            disabled={false}
                            editable={true}
                            id="rc_select_TEST_OR_SSR"
                            inputElement={null}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            open={true}
                            prefixCls="ant-select"
                            value="test"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_-1"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded={true}
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autoComplete="off"
                              className="ant-select-selection-search-input"
                              disabled={false}
                              id="rc_select_TEST_OR_SSR"
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onKeyDown={[Function]}
                              onMouseDown={[Function]}
                              onPaste={[Function]}
                              readOnly={false}
                              role="combobox"
                              style={
                                Object {
                                  "opacity": null,
                                }
                              }
                              type="search"
                              unselectable={null}
                              value="test"
                            />
                          </Input>
                        </span>
                      </SingleSelector>
                    </div>
                  </Selector>
                  <ForwardRef
                    didUpdate={[Function]}
                    getContainer={[Function]}
                    key="portal"
                  >
                    <Portal
                      containerInfo={
                        <div
                          style="position: absolute; top: 0px; left: 0px; width: 100%;"
                        >
                          <div>
                            <div
                              class="ant-select-dropdown"
                              style="opacity: 0; min-width: 0; width: 0px;"
                            >
                              <div>
                                <div
                                  id="rc_select_TEST_OR_SSR_list"
                                  role="listbox"
                                  style="height: 0px; width: 0px; overflow: hidden;"
                                >
                                  <div
                                    aria-selected="false"
                                    id="rc_select_TEST_OR_SSR_list_0"
                                    role="option"
                                  >
                                    test
                                  </div>
                                </div>
                                <div
                                  class="rc-virtual-list"
                                  style="position: relative;"
                                >
                                  <div
                                    class="rc-virtual-list-holder"
                                    style="max-height: 256px; overflow-y: hidden;"
                                  >
                                    <div>
                                      <div
                                        class="rc-virtual-list-holder-inner"
                                        style="display: flex; flex-direction: column;"
                                      >
                                        <div
                                          aria-selected="false"
                                          class="ant-select-item ant-select-item-option"
                                          title="test"
                                        >
                                          <div
                                            class="ant-select-item-option-content"
                                          >
                                            test
                                          </div>
                                          <span
                                            aria-hidden="true"
                                            class="ant-select-item-option-state"
                                            style="user-select: none;"
                                            unselectable="on"
                                          />
                                        </div>
                                        <div
                                          aria-selected="false"
                                          class="ant-select-item ant-select-item-option"
                                          title="testtest"
                                        >
                                          <div
                                            class="ant-select-item-option-content"
                                          >
                                            testtest
                                          </div>
                                          <span
                                            aria-hidden="true"
                                            class="ant-select-item-option-state"
                                            style="user-select: none;"
                                            unselectable="on"
                                          />
                                        </div>
                                        <div
                                          aria-selected="false"
                                          class="ant-select-item ant-select-item-option"
                                          title="testtesttest"
                                        >
                                          <div
                                            class="ant-select-item-option-content"
                                          >
                                            testtesttest
                                          </div>
                                          <span
                                            aria-hidden="true"
                                            class="ant-select-item-option-state"
                                            style="user-select: none;"
                                            unselectable="on"
                                          />
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    class="rc-virtual-list-scrollbar"
                                    style="width: 8px; top: 0px; bottom: 0px; right: 0px; position: absolute; display: none;"
                                  >
                                    <div
                                      class="rc-virtual-list-scrollbar-thumb"
                                      style="width: 100%; height: 128px; top: 0px; left: 0px; position: absolute; background: rgba(0, 0, 0, 0.5); border-radius: 99px; cursor: pointer; user-select: none;"
                                    />
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      }
                    >
                      <Popup
                        align={
                          Object {
                            "offset": Array [
                              0,
                              4,
                            ],
                            "overflow": Object {
                              "adjustX": 0,
                              "adjustY": 1,
                            },
                            "points": Array [
                              "tl",
                              "bl",
                            ],
                          }
                        }
                        className=""
                        destroyPopupOnHide={false}
                        getClassNameFromAlign={[Function]}
                        getRootDomNode={[Function]}
                        mask={false}
                        onAlign={[Function]}
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                        prefixCls="ant-select-dropdown"
                        style={
                          Object {
                            "minWidth": 0,
                            "width": 0,
                          }
                        }
                        transitionName="ant-slide-up"
                        visible={true}
                      >
                        <div>
                          <Mask
                            align={
                              Object {
                                "offset": Array [
                                  0,
                                  4,
                                ],
                                "overflow": Object {
                                  "adjustX": 0,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "tl",
                                  "bl",
                                ],
                              }
                            }
                            className=""
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-select-dropdown"
                            style={
                              Object {
                                "minWidth": 0,
                                "width": 0,
                              }
                            }
                            transitionName="ant-slide-up"
                            visible={true}
                          />
                          <PopupInner
                            align={
                              Object {
                                "offset": Array [
                                  0,
                                  4,
                                ],
                                "overflow": Object {
                                  "adjustX": 0,
                                  "adjustY": 1,
                                },
                                "points": Array [
                                  "tl",
                                  "bl",
                                ],
                              }
                            }
                            className=""
                            destroyPopupOnHide={false}
                            getClassNameFromAlign={[Function]}
                            getRootDomNode={[Function]}
                            mask={false}
                            onAlign={[Function]}
                            onMouseDown={[Function]}
                            onTouchStart={[Function]}
                            prefixCls="ant-select-dropdown"
                            style={
                              Object {
                                "minWidth": 0,
                                "width": 0,
                              }
                            }
                            transitionName="ant-slide-up"
                            visible={true}
                          >
                            <CSSMotion
                              leavedClassName="ant-select-dropdown-hidden"
                              motionName="ant-slide-up"
                              onAppearEnd={[Function]}
                              onAppearPrepare={[Function]}
                              onEnterEnd={[Function]}
                              onEnterPrepare={[Function]}
                              onLeaveEnd={[Function]}
                              removeOnLeave={false}
                              visible={true}
                            >
                              <DomWrapper>
                                <Align
                                  align={
                                    Object {
                                      "offset": Array [
                                        0,
                                        4,
                                      ],
                                      "overflow": Object {
                                        "adjustX": 0,
                                        "adjustY": 1,
                                      },
                                      "points": Array [
                                        "tl",
                                        "bl",
                                      ],
                                    }
                                  }
                                  disabled={true}
                                  key="popup"
                                  monitorWindowResize={true}
                                  onAlign={[Function]}
                                  target={[Function]}
                                >
                                  <div
                                    className="ant-select-dropdown"
                                    onMouseDownCapture={[Function]}
                                    onTouchStartCapture={[Function]}
                                    style={
                                      Object {
                                        "minWidth": 0,
                                        "opacity": 0,
                                        "pointerEvents": undefined,
                                        "width": 0,
                                        "zIndex": undefined,
                                      }
                                    }
                                  >
                                    <div
                                      onMouseEnter={[Function]}
                                    >
                                      <OptionList>
                                        <div
                                          id="rc_select_TEST_OR_SSR_list"
                                          role="listbox"
                                          style={
                                            Object {
                                              "height": 0,
                                              "overflow": "hidden",
                                              "width": 0,
                                            }
                                          }
                                        >
                                          <div
                                            aria-label={null}
                                            aria-selected={false}
                                            id="rc_select_TEST_OR_SSR_list_0"
                                            key="0"
                                            role="option"
                                          >
                                            test
                                          </div>
                                        </div>
                                        <List
                                          data={
                                            Array [
                                              Object {
                                                "data": Object {
                                                  "value": "test",
                                                },
                                                "groupOption": false,
                                                "key": "test",
                                                "label": undefined,
                                                "value": "test",
                                              },
                                              Object {
                                                "data": Object {
                                                  "value": "testtest",
                                                },
                                                "groupOption": false,
                                                "key": "testtest",
                                                "label": undefined,
                                                "value": "testtest",
                                              },
                                              Object {
                                                "data": Object {
                                                  "value": "testtesttest",
                                                },
                                                "groupOption": false,
                                                "key": "testtesttest",
                                                "label": undefined,
                                                "value": "testtesttest",
                                              },
                                            ]
                                          }
                                          fullHeight={false}
                                          height={256}
                                          itemHeight={24}
                                          itemKey="key"
                                          onMouseDown={[Function]}
                                          virtual={true}
                                        >
                                          <div
                                            className="rc-virtual-list"
                                            onMouseDown={[Function]}
                                            style={
                                              Object {
                                                "position": "relative",
                                              }
                                            }
                                          >
                                            <div
                                              className="rc-virtual-list-holder"
                                              onScroll={[Function]}
                                              style={
                                                Object {
                                                  "maxHeight": 256,
                                                  "overflowAnchor": "none",
                                                  "overflowY": "hidden",
                                                }
                                              }
                                            >
                                              <Filler
                                                height={0}
                                                onInnerResize={[Function]}
                                                prefixCls="rc-virtual-list"
                                              >
                                                <div
                                                  style={Object {}}
                                                >
                                                  <ResizeObserver
                                                    onResize={[Function]}
                                                  >
                                                    <SingleObserver
                                                      key="rc-observer-key-0"
                                                      onResize={[Function]}
                                                    >
                                                      <DomWrapper>
                                                        <div
                                                          className="rc-virtual-list-holder-inner"
                                                          style={
                                                            Object {
                                                              "display": "flex",
                                                              "flexDirection": "column",
                                                            }
                                                          }
                                                        >
                                                          <Item
                                                            key="test"
                                                            setRef={[Function]}
                                                          >
                                                            <div
                                                              aria-selected={false}
                                                              className="ant-select-item ant-select-item-option"
                                                              onClick={[Function]}
                                                              onMouseMove={[Function]}
                                                              title="test"
                                                            >
                                                              <div
                                                                className="ant-select-item-option-content"
                                                              >
                                                                test
                                                              </div>
                                                              <TransBtn
                                                                className="ant-select-item-option-state"
                                                                customizeIcon={null}
                                                                customizeIconProps={
                                                                  Object {
                                                                    "isSelected": false,
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-hidden={true}
                                                                  className="ant-select-item-option-state"
                                                                  onMouseDown={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                />
                                                              </TransBtn>
                                                            </div>
                                                          </Item>
                                                          <Item
                                                            key="testtest"
                                                            setRef={[Function]}
                                                          >
                                                            <div
                                                              aria-selected={false}
                                                              className="ant-select-item ant-select-item-option"
                                                              onClick={[Function]}
                                                              onMouseMove={[Function]}
                                                              title="testtest"
                                                            >
                                                              <div
                                                                className="ant-select-item-option-content"
                                                              >
                                                                testtest
                                                              </div>
                                                              <TransBtn
                                                                className="ant-select-item-option-state"
                                                                customizeIcon={null}
                                                                customizeIconProps={
                                                                  Object {
                                                                    "isSelected": false,
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-hidden={true}
                                                                  className="ant-select-item-option-state"
                                                                  onMouseDown={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                />
                                                              </TransBtn>
                                                            </div>
                                                          </Item>
                                                          <Item
                                                            key="testtesttest"
                                                            setRef={[Function]}
                                                          >
                                                            <div
                                                              aria-selected={false}
                                                              className="ant-select-item ant-select-item-option"
                                                              onClick={[Function]}
                                                              onMouseMove={[Function]}
                                                              title="testtesttest"
                                                            >
                                                              <div
                                                                className="ant-select-item-option-content"
                                                              >
                                                                testtesttest
                                                              </div>
                                                              <TransBtn
                                                                className="ant-select-item-option-state"
                                                                customizeIcon={null}
                                                                customizeIconProps={
                                                                  Object {
                                                                    "isSelected": false,
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-hidden={true}
                                                                  className="ant-select-item-option-state"
                                                                  onMouseDown={[Function]}
                                                                  style={
                                                                    Object {
                                                                      "WebkitUserSelect": "none",
                                                                      "userSelect": "none",
                                                                    }
                                                                  }
                                                                  unselectable="on"
                                                                />
                                                              </TransBtn>
                                                            </div>
                                                          </Item>
                                                        </div>
                                                      </DomWrapper>
                                                    </SingleObserver>
                                                  </ResizeObserver>
                                                </div>
                                              </Filler>
                                            </div>
                                            <ScrollBar
                                              count={3}
                                              height={256}
                                              onScroll={[Function]}
                                              onStartMove={[Function]}
                                              onStopMove={[Function]}
                                              prefixCls="rc-virtual-list"
                                              scrollHeight={0}
                                              scrollTop={0}
                                            >
                                              <div
                                                className="rc-virtual-list-scrollbar"
                                                onMouseDown={[Function]}
                                                onMouseMove={[Function]}
                                                style={
                                                  Object {
                                                    "bottom": 0,
                                                    "display": "none",
                                                    "position": "absolute",
                                                    "right": 0,
                                                    "top": 0,
                                                    "width": 8,
                                                  }
                                                }
                                              >
                                                <div
                                                  className="rc-virtual-list-scrollbar-thumb"
                                                  onMouseDown={[Function]}
                                                  style={
                                                    Object {
                                                      "background": "rgba(0, 0, 0, 0.5)",
                                                      "borderRadius": 99,
                                                      "cursor": "pointer",
                                                      "height": 128,
                                                      "left": 0,
                                                      "position": "absolute",
                                                      "top": 0,
                                                      "userSelect": "none",
                                                      "width": "100%",
                                                    }
                                                  }
                                                />
                                              </div>
                                            </ScrollBar>
                                          </div>
                                        </List>
                                      </OptionList>
                                    </div>
                                  </div>
                                </Align>
                              </DomWrapper>
                            </CSSMotion>
                          </PopupInner>
                        </div>
                      </Popup>
                    </Portal>
                  </ForwardRef>
                </Trigger>
              </SelectTrigger>
            </div>
          </BaseSelect>
        </Select>
      </ForwardRef(InternalSelect)>
    </ForwardRef(AutoComplete)>
  </Search>
</Provider>
`;

exports[`Account Menu component should call onSearch with undefined val 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Search>
    <ForwardRef(AutoComplete)
      onSearch={[Function]}
      onSelect={[Function]}
      options={Array []}
      placeholder="Search..."
      style={
        Object {
          "width": 400,
        }
      }
    >
      <ForwardRef(InternalSelect)
        className="ant-select-auto-complete"
        mode="SECRET_COMBOBOX_MODE_DO_NOT_USE"
        onSearch={[Function]}
        onSelect={[Function]}
        options={Array []}
        placeholder="Search..."
        prefixCls="ant-select"
        style={
          Object {
            "width": 400,
          }
        }
      >
        <Select
          className="ant-select-auto-complete"
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          dropdownClassName=""
          inputIcon={[Function]}
          listHeight={256}
          listItemHeight={24}
          menuItemSelectedIcon={null}
          mode="combobox"
          notFoundContent={null}
          onSearch={[Function]}
          onSelect={[Function]}
          options={Array []}
          placeholder="Search..."
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          style={
            Object {
              "width": 400,
            }
          }
          transitionName="ant-slide-up"
        >
          <BaseSelect
            OptionList={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "OptionList",
                "render": [Function],
              }
            }
            activeDescendantId="rc_select_TEST_OR_SSR_list_0"
            activeValue={null}
            autoClearSearchValue={true}
            className="ant-select-auto-complete"
            clearIcon={<ForwardRef(CloseCircleFilled) />}
            disabled={false}
            displayValues={Array []}
            dropdownClassName=""
            dropdownMatchSelectWidth={true}
            emptyOptions={true}
            id="rc_select_TEST_OR_SSR"
            inputIcon={[Function]}
            mode="combobox"
            notFoundContent={null}
            omitDomProps={
              Array [
                "inputValue",
              ]
            }
            onDisplayValuesChange={[Function]}
            onSearch={[Function]}
            onSearchSplit={[Function]}
            placeholder="Search..."
            placement="bottomLeft"
            prefixCls="ant-select"
            removeIcon={<ForwardRef(CloseOutlined) />}
            searchValue=""
            style={
              Object {
                "width": 400,
              }
            }
            transitionName="ant-slide-up"
          >
            <div
              className="ant-select ant-select-auto-complete ant-select-single ant-select-show-search"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              style={
                Object {
                  "width": 400,
                }
              }
            >
              <SelectTrigger
                containerWidth={null}
                disabled={false}
                dropdownClassName=""
                dropdownMatchSelectWidth={true}
                empty={true}
                getTriggerDOMNode={[Function]}
                onPopupMouseEnter={[Function]}
                placement="bottomLeft"
                popupElement={<ForwardRef(OptionList) />}
                prefixCls="ant-select"
                transitionName="ant-slide-up"
                visible={false}
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "bottomRight": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                      "topRight": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  getTriggerDOMNode={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  popup={
                    <div
                      onMouseEnter={[Function]}
                    >
                      <ForwardRef(OptionList) />
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName="ant-select-dropdown-empty"
                  popupPlacement="bottomLeft"
                  popupStyle={
                    Object {
                      "minWidth": null,
                      "width": null,
                    }
                  }
                  popupTransitionName="ant-slide-up"
                  popupVisible={false}
                  prefixCls="ant-select-dropdown"
                  showAction={Array []}
                >
                  <Selector
                    OptionList={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "displayName": "OptionList",
                        "render": [Function],
                      }
                    }
                    activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                    activeValue={null}
                    autoClearSearchValue={true}
                    className="ant-select-auto-complete"
                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                    disabled={false}
                    displayValues={Array []}
                    domRef={
                      Object {
                        "current": <div
                          class="ant-select-selector"
                        >
                          <span
                            class="ant-select-selection-search"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded="false"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value=""
                            />
                          </span>
                          <span
                            class="ant-select-selection-placeholder"
                          >
                            Search...
                          </span>
                        </div>,
                      }
                    }
                    dropdownClassName=""
                    dropdownMatchSelectWidth={true}
                    emptyOptions={true}
                    id="rc_select_TEST_OR_SSR"
                    inputElement={null}
                    inputIcon={[Function]}
                    key="trigger"
                    mode="combobox"
                    notFoundContent={null}
                    omitDomProps={
                      Array [
                        "inputValue",
                      ]
                    }
                    onDisplayValuesChange={[Function]}
                    onRemove={[Function]}
                    onSearch={[Function]}
                    onSearchSplit={[Function]}
                    onSearchSubmit={[Function]}
                    onToggleOpen={[Function]}
                    open={false}
                    placeholder="Search..."
                    placement="bottomLeft"
                    prefixCls="ant-select"
                    removeIcon={<ForwardRef(CloseOutlined) />}
                    searchValue=""
                    showSearch={true}
                    style={
                      Object {
                        "width": 400,
                      }
                    }
                    tokenWithEnter={false}
                    transitionName="ant-slide-up"
                    values={Array []}
                  >
                    <div
                      className="ant-select-selector"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <SingleSelector
                        OptionList={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "displayName": "OptionList",
                            "render": [Function],
                          }
                        }
                        activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                        activeValue={null}
                        autoClearSearchValue={true}
                        className="ant-select-auto-complete"
                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                        disabled={false}
                        displayValues={Array []}
                        domRef={
                          Object {
                            "current": <div
                              class="ant-select-selector"
                            >
                              <span
                                class="ant-select-selection-search"
                              >
                                <input
                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                  aria-autocomplete="list"
                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                  aria-expanded="false"
                                  aria-haspopup="listbox"
                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                  autocomplete="off"
                                  class="ant-select-selection-search-input"
                                  id="rc_select_TEST_OR_SSR"
                                  role="combobox"
                                  type="search"
                                  value=""
                                />
                              </span>
                              <span
                                class="ant-select-selection-placeholder"
                              >
                                Search...
                              </span>
                            </div>,
                          }
                        }
                        dropdownClassName=""
                        dropdownMatchSelectWidth={true}
                        emptyOptions={true}
                        id="rc_select_TEST_OR_SSR"
                        inputElement={null}
                        inputIcon={[Function]}
                        inputRef={
                          Object {
                            "current": <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded="false"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value=""
                            />,
                          }
                        }
                        mode="combobox"
                        notFoundContent={null}
                        omitDomProps={
                          Array [
                            "inputValue",
                          ]
                        }
                        onDisplayValuesChange={[Function]}
                        onInputChange={[Function]}
                        onInputCompositionEnd={[Function]}
                        onInputCompositionStart={[Function]}
                        onInputKeyDown={[Function]}
                        onInputMouseDown={[Function]}
                        onInputPaste={[Function]}
                        onRemove={[Function]}
                        onSearch={[Function]}
                        onSearchSplit={[Function]}
                        onSearchSubmit={[Function]}
                        onToggleOpen={[Function]}
                        open={false}
                        placeholder="Search..."
                        placement="bottomLeft"
                        prefixCls="ant-select"
                        removeIcon={<ForwardRef(CloseOutlined) />}
                        searchValue=""
                        showSearch={true}
                        style={
                          Object {
                            "width": 400,
                          }
                        }
                        tokenWithEnter={false}
                        transitionName="ant-slide-up"
                        values={Array []}
                      >
                        <span
                          className="ant-select-selection-search"
                        >
                          <Input
                            activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                            attrs={Object {}}
                            disabled={false}
                            editable={true}
                            id="rc_select_TEST_OR_SSR"
                            inputElement={null}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            open={false}
                            prefixCls="ant-select"
                            value=""
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autoComplete="off"
                              className="ant-select-selection-search-input"
                              disabled={false}
                              id="rc_select_TEST_OR_SSR"
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onKeyDown={[Function]}
                              onMouseDown={[Function]}
                              onPaste={[Function]}
                              readOnly={false}
                              role="combobox"
                              style={
                                Object {
                                  "opacity": null,
                                }
                              }
                              type="search"
                              unselectable={null}
                              value=""
                            />
                          </Input>
                        </span>
                        <span
                          className="ant-select-selection-placeholder"
                        >
                          Search...
                        </span>
                      </SingleSelector>
                    </div>
                  </Selector>
                </Trigger>
              </SelectTrigger>
            </div>
          </BaseSelect>
        </Select>
      </ForwardRef(InternalSelect)>
    </ForwardRef(AutoComplete)>
  </Search>
</Provider>
`;

exports[`Account Menu component should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Search>
    <ForwardRef(AutoComplete)
      onSearch={[Function]}
      onSelect={[Function]}
      options={Array []}
      placeholder="Search..."
      style={
        Object {
          "width": 400,
        }
      }
    >
      <ForwardRef(InternalSelect)
        className="ant-select-auto-complete"
        mode="SECRET_COMBOBOX_MODE_DO_NOT_USE"
        onSearch={[Function]}
        onSelect={[Function]}
        options={Array []}
        placeholder="Search..."
        prefixCls="ant-select"
        style={
          Object {
            "width": 400,
          }
        }
      >
        <Select
          className="ant-select-auto-complete"
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          disabled={false}
          dropdownClassName=""
          inputIcon={[Function]}
          listHeight={256}
          listItemHeight={24}
          menuItemSelectedIcon={null}
          mode="combobox"
          notFoundContent={null}
          onSearch={[Function]}
          onSelect={[Function]}
          options={Array []}
          placeholder="Search..."
          placement="bottomLeft"
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          style={
            Object {
              "width": 400,
            }
          }
          transitionName="ant-slide-up"
        >
          <BaseSelect
            OptionList={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "OptionList",
                "render": [Function],
              }
            }
            activeDescendantId="rc_select_TEST_OR_SSR_list_0"
            activeValue={null}
            autoClearSearchValue={true}
            className="ant-select-auto-complete"
            clearIcon={<ForwardRef(CloseCircleFilled) />}
            disabled={false}
            displayValues={Array []}
            dropdownClassName=""
            dropdownMatchSelectWidth={true}
            emptyOptions={true}
            id="rc_select_TEST_OR_SSR"
            inputIcon={[Function]}
            mode="combobox"
            notFoundContent={null}
            omitDomProps={
              Array [
                "inputValue",
              ]
            }
            onDisplayValuesChange={[Function]}
            onSearch={[Function]}
            onSearchSplit={[Function]}
            placeholder="Search..."
            placement="bottomLeft"
            prefixCls="ant-select"
            removeIcon={<ForwardRef(CloseOutlined) />}
            searchValue=""
            style={
              Object {
                "width": 400,
              }
            }
            transitionName="ant-slide-up"
          >
            <div
              className="ant-select ant-select-auto-complete ant-select-single ant-select-show-search"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              style={
                Object {
                  "width": 400,
                }
              }
            >
              <SelectTrigger
                containerWidth={null}
                disabled={false}
                dropdownClassName=""
                dropdownMatchSelectWidth={true}
                empty={true}
                getTriggerDOMNode={[Function]}
                onPopupMouseEnter={[Function]}
                placement="bottomLeft"
                popupElement={<ForwardRef(OptionList) />}
                prefixCls="ant-select"
                transitionName="ant-slide-up"
                visible={false}
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "bottomRight": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                      "topRight": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  getTriggerDOMNode={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  popup={
                    <div
                      onMouseEnter={[Function]}
                    >
                      <ForwardRef(OptionList) />
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName="ant-select-dropdown-empty"
                  popupPlacement="bottomLeft"
                  popupStyle={
                    Object {
                      "minWidth": null,
                      "width": null,
                    }
                  }
                  popupTransitionName="ant-slide-up"
                  popupVisible={false}
                  prefixCls="ant-select-dropdown"
                  showAction={Array []}
                >
                  <Selector
                    OptionList={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "displayName": "OptionList",
                        "render": [Function],
                      }
                    }
                    activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                    activeValue={null}
                    autoClearSearchValue={true}
                    className="ant-select-auto-complete"
                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                    disabled={false}
                    displayValues={Array []}
                    domRef={
                      Object {
                        "current": <div
                          class="ant-select-selector"
                        >
                          <span
                            class="ant-select-selection-search"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value=""
                            />
                          </span>
                          <span
                            class="ant-select-selection-placeholder"
                          >
                            Search...
                          </span>
                        </div>,
                      }
                    }
                    dropdownClassName=""
                    dropdownMatchSelectWidth={true}
                    emptyOptions={true}
                    id="rc_select_TEST_OR_SSR"
                    inputElement={null}
                    inputIcon={[Function]}
                    key="trigger"
                    mode="combobox"
                    notFoundContent={null}
                    omitDomProps={
                      Array [
                        "inputValue",
                      ]
                    }
                    onDisplayValuesChange={[Function]}
                    onRemove={[Function]}
                    onSearch={[Function]}
                    onSearchSplit={[Function]}
                    onSearchSubmit={[Function]}
                    onToggleOpen={[Function]}
                    placeholder="Search..."
                    placement="bottomLeft"
                    prefixCls="ant-select"
                    removeIcon={<ForwardRef(CloseOutlined) />}
                    searchValue=""
                    showSearch={true}
                    style={
                      Object {
                        "width": 400,
                      }
                    }
                    tokenWithEnter={false}
                    transitionName="ant-slide-up"
                    values={Array []}
                  >
                    <div
                      className="ant-select-selector"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <SingleSelector
                        OptionList={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "displayName": "OptionList",
                            "render": [Function],
                          }
                        }
                        activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                        activeValue={null}
                        autoClearSearchValue={true}
                        className="ant-select-auto-complete"
                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                        disabled={false}
                        displayValues={Array []}
                        domRef={
                          Object {
                            "current": <div
                              class="ant-select-selector"
                            >
                              <span
                                class="ant-select-selection-search"
                              >
                                <input
                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                  aria-autocomplete="list"
                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                  aria-haspopup="listbox"
                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                  autocomplete="off"
                                  class="ant-select-selection-search-input"
                                  id="rc_select_TEST_OR_SSR"
                                  role="combobox"
                                  type="search"
                                  value=""
                                />
                              </span>
                              <span
                                class="ant-select-selection-placeholder"
                              >
                                Search...
                              </span>
                            </div>,
                          }
                        }
                        dropdownClassName=""
                        dropdownMatchSelectWidth={true}
                        emptyOptions={true}
                        id="rc_select_TEST_OR_SSR"
                        inputElement={null}
                        inputIcon={[Function]}
                        inputRef={
                          Object {
                            "current": <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              role="combobox"
                              type="search"
                              value=""
                            />,
                          }
                        }
                        mode="combobox"
                        notFoundContent={null}
                        omitDomProps={
                          Array [
                            "inputValue",
                          ]
                        }
                        onDisplayValuesChange={[Function]}
                        onInputChange={[Function]}
                        onInputCompositionEnd={[Function]}
                        onInputCompositionStart={[Function]}
                        onInputKeyDown={[Function]}
                        onInputMouseDown={[Function]}
                        onInputPaste={[Function]}
                        onRemove={[Function]}
                        onSearch={[Function]}
                        onSearchSplit={[Function]}
                        onSearchSubmit={[Function]}
                        onToggleOpen={[Function]}
                        placeholder="Search..."
                        placement="bottomLeft"
                        prefixCls="ant-select"
                        removeIcon={<ForwardRef(CloseOutlined) />}
                        searchValue=""
                        showSearch={true}
                        style={
                          Object {
                            "width": 400,
                          }
                        }
                        tokenWithEnter={false}
                        transitionName="ant-slide-up"
                        values={Array []}
                      >
                        <span
                          className="ant-select-selection-search"
                        >
                          <Input
                            activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                            attrs={Object {}}
                            disabled={false}
                            editable={true}
                            id="rc_select_TEST_OR_SSR"
                            inputElement={null}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            prefixCls="ant-select"
                            value=""
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autoComplete="off"
                              className="ant-select-selection-search-input"
                              disabled={false}
                              id="rc_select_TEST_OR_SSR"
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onKeyDown={[Function]}
                              onMouseDown={[Function]}
                              onPaste={[Function]}
                              readOnly={false}
                              role="combobox"
                              style={
                                Object {
                                  "opacity": null,
                                }
                              }
                              type="search"
                              unselectable={null}
                              value=""
                            />
                          </Input>
                        </span>
                        <span
                          className="ant-select-selection-placeholder"
                        >
                          Search...
                        </span>
                      </SingleSelector>
                    </div>
                  </Selector>
                </Trigger>
              </SelectTrigger>
            </div>
          </BaseSelect>
        </Select>
      </ForwardRef(InternalSelect)>
    </ForwardRef(AutoComplete)>
  </Search>
</Provider>
`;
