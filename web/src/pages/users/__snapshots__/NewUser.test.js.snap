// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`New User create component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <NewUser>
    <div
      className="content"
    >
      <Card
        style={
          Object {
            "width": 450,
          }
        }
        title="Add User"
      >
        <div
          className="ant-card ant-card-bordered"
          style={
            Object {
              "width": 450,
            }
          }
        >
          <div
            className="ant-card-head"
            style={Object {}}
          >
            <div
              className="ant-card-head-wrapper"
            >
              <div
                className="ant-card-head-title"
              >
                Add User
              </div>
            </div>
          </div>
          <div
            className="ant-card-body"
            style={Object {}}
          >
            <ForwardRef(InternalForm)
              form={
                Object {
                  "__INTERNAL__": Object {
                    "itemRef": [Function],
                    "name": "add_user",
                  },
                  "getFieldError": [Function],
                  "getFieldInstance": [Function],
                  "getFieldValue": [Function],
                  "getFieldsError": [Function],
                  "getFieldsValue": [Function],
                  "getInternalHooks": [Function],
                  "isFieldTouched": [Function],
                  "isFieldValidating": [Function],
                  "isFieldsTouched": [Function],
                  "isFieldsValidating": [Function],
                  "resetFields": [Function],
                  "scrollToField": [Function],
                  "setFields": [Function],
                  "setFieldsValue": [Function],
                  "submit": [Function],
                  "validateFields": [Function],
                }
              }
              initialValues={
                Object {
                  "role": "member",
                }
              }
              labelCol={
                Object {
                  "span": 6,
                }
              }
              name="add_user"
              onFinish={[Function]}
              wrapperCol={
                Object {
                  "span": 15,
                }
              }
            >
              <SizeContextProvider>
                <ForwardRef(Form)
                  className="ant-form ant-form-horizontal"
                  form={
                    Object {
                      "__INTERNAL__": Object {
                        "itemRef": [Function],
                        "name": "add_user",
                      },
                      "getFieldError": [Function],
                      "getFieldInstance": [Function],
                      "getFieldValue": [Function],
                      "getFieldsError": [Function],
                      "getFieldsValue": [Function],
                      "getInternalHooks": [Function],
                      "isFieldTouched": [Function],
                      "isFieldValidating": [Function],
                      "isFieldsTouched": [Function],
                      "isFieldsValidating": [Function],
                      "resetFields": [Function],
                      "scrollToField": [Function],
                      "setFields": [Function],
                      "setFieldsValue": [Function],
                      "submit": [Function],
                      "validateFields": [Function],
                    }
                  }
                  id="add_user"
                  initialValues={
                    Object {
                      "role": "member",
                    }
                  }
                  name="add_user"
                  onFinish={[Function]}
                  onFinishFailed={[Function]}
                >
                  <form
                    className="ant-form ant-form-horizontal"
                    id="add_user"
                    onSubmit={[Function]}
                  >
                    <FormItem
                      label="First Name"
                      name="first_name"
                      rules={
                        Array [
                          Object {
                            "message": "Please enter First Name!",
                            "required": true,
                          },
                        ]
                      }
                    >
                      <WrapperField
                        label="First Name"
                        messageVariables={
                          Object {
                            "label": "First Name",
                          }
                        }
                        name="first_name"
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please enter First Name!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "add_user",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_first_name"
                          label="First Name"
                          messageVariables={
                            Object {
                              "label": "First Name",
                            }
                          }
                          name={
                            Array [
                              "first_name",
                            ]
                          }
                          onReset={[Function]}
                          rules={
                            Array [
                              Object {
                                "message": "Please enter First Name!",
                                "required": true,
                              },
                            ]
                          }
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="add_user_first_name"
                                label="First Name"
                                name="first_name"
                                prefixCls="ant-form"
                                required={true}
                                requiredMark={true}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter First Name!",
                                      "required": true,
                                    },
                                  ]
                                }
                              >
                                <Col
                                  className="ant-form-item-label"
                                  span={6}
                                >
                                  <div
                                    className="ant-col ant-col-6 ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className="ant-form-item-required"
                                      htmlFor="add_user_first_name"
                                      title="First Name"
                                    >
                                      First Name
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="First Name"
                                name={
                                  Array [
                                    "first_name",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter First Name!",
                                      "required": true,
                                    },
                                  ]
                                }
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                  span={15}
                                >
                                  <div
                                    className="ant-col ant-col-15 ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                        >
                                          <Input
                                            id="add_user_first_name"
                                            onChange={[Function]}
                                            placeholder="First Name"
                                            type="text"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="add_user_first_name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="First Name"
                                                  type="text"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="add_user_first_name"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="First Name"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                id="add_user_first_name"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="First Name"
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem
                      label="Last Name"
                      name="last_name"
                      rules={
                        Array [
                          Object {
                            "message": "Please enter Last Name!",
                            "required": true,
                          },
                        ]
                      }
                    >
                      <WrapperField
                        label="Last Name"
                        messageVariables={
                          Object {
                            "label": "Last Name",
                          }
                        }
                        name="last_name"
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please enter Last Name!",
                              "required": true,
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "add_user",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_last_name"
                          label="Last Name"
                          messageVariables={
                            Object {
                              "label": "Last Name",
                            }
                          }
                          name={
                            Array [
                              "last_name",
                            ]
                          }
                          onReset={[Function]}
                          rules={
                            Array [
                              Object {
                                "message": "Please enter Last Name!",
                                "required": true,
                              },
                            ]
                          }
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="add_user_last_name"
                                label="Last Name"
                                name="last_name"
                                prefixCls="ant-form"
                                required={true}
                                requiredMark={true}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter Last Name!",
                                      "required": true,
                                    },
                                  ]
                                }
                              >
                                <Col
                                  className="ant-form-item-label"
                                  span={6}
                                >
                                  <div
                                    className="ant-col ant-col-6 ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className="ant-form-item-required"
                                      htmlFor="add_user_last_name"
                                      title="Last Name"
                                    >
                                      Last Name
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="Last Name"
                                name={
                                  Array [
                                    "last_name",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please enter Last Name!",
                                      "required": true,
                                    },
                                  ]
                                }
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                  span={15}
                                >
                                  <div
                                    className="ant-col ant-col-15 ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                        >
                                          <Input
                                            id="add_user_last_name"
                                            onChange={[Function]}
                                            placeholder="Last Name"
                                            type="text"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="add_user_last_name"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Last Name"
                                                  type="text"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="add_user_last_name"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="Last Name"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                id="add_user_last_name"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Last Name"
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem
                      label="Email"
                      name="email"
                      rules={
                        Array [
                          Object {
                            "message": "Please input your title!",
                            "required": true,
                          },
                          Object {
                            "message": "Please input valid Email!",
                            "type": "email",
                          },
                        ]
                      }
                    >
                      <WrapperField
                        label="Email"
                        messageVariables={
                          Object {
                            "label": "Email",
                          }
                        }
                        name="email"
                        onReset={[Function]}
                        rules={
                          Array [
                            Object {
                              "message": "Please input your title!",
                              "required": true,
                            },
                            Object {
                              "message": "Please input valid Email!",
                              "type": "email",
                            },
                          ]
                        }
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "add_user",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_email"
                          label="Email"
                          messageVariables={
                            Object {
                              "label": "Email",
                            }
                          }
                          name={
                            Array [
                              "email",
                            ]
                          }
                          onReset={[Function]}
                          rules={
                            Array [
                              Object {
                                "message": "Please input your title!",
                                "required": true,
                              },
                              Object {
                                "message": "Please input valid Email!",
                                "type": "email",
                              },
                            ]
                          }
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="add_user_email"
                                label="Email"
                                name="email"
                                prefixCls="ant-form"
                                required={true}
                                requiredMark={true}
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input your title!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please input valid Email!",
                                      "type": "email",
                                    },
                                  ]
                                }
                              >
                                <Col
                                  className="ant-form-item-label"
                                  span={6}
                                >
                                  <div
                                    className="ant-col ant-col-6 ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className="ant-form-item-required"
                                      htmlFor="add_user_email"
                                      title="Email"
                                    >
                                      Email
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="Email"
                                name={
                                  Array [
                                    "email",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                rules={
                                  Array [
                                    Object {
                                      "message": "Please input your title!",
                                      "required": true,
                                    },
                                    Object {
                                      "message": "Please input valid Email!",
                                      "type": "email",
                                    },
                                  ]
                                }
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                  span={15}
                                >
                                  <div
                                    className="ant-col ant-col-15 ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                        >
                                          <Input
                                            id="add_user_email"
                                            onChange={[Function]}
                                            placeholder="Email"
                                            type="text"
                                          >
                                            <ClearableLabeledInput
                                              bordered={true}
                                              element={
                                                <input
                                                  className="ant-input"
                                                  id="add_user_email"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Email"
                                                  type="text"
                                                />
                                              }
                                              focused={false}
                                              handleReset={[Function]}
                                              id="add_user_email"
                                              inputType="input"
                                              onChange={[Function]}
                                              placeholder="Email"
                                              prefixCls="ant-input"
                                              triggerFocus={[Function]}
                                              type="text"
                                              value=""
                                            >
                                              <input
                                                className="ant-input"
                                                id="add_user_email"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                placeholder="Email"
                                                type="text"
                                                value=""
                                              />
                                            </ClearableLabeledInput>
                                          </Input>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem
                      label="Role"
                      name="role"
                    >
                      <WrapperField
                        label="Role"
                        messageVariables={
                          Object {
                            "label": "Role",
                          }
                        }
                        name="role"
                        onReset={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                      >
                        <Field
                          fieldContext={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": "add_user",
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                              "validateTrigger": "onChange",
                            }
                          }
                          key="_role"
                          label="Role"
                          messageVariables={
                            Object {
                              "label": "Role",
                            }
                          }
                          name={
                            Array [
                              "role",
                            ]
                          }
                          onReset={[Function]}
                          trigger="onChange"
                          validateTrigger="onChange"
                          valuePropName="value"
                        >
                          <Row
                            className="ant-form-item"
                            key="row"
                          >
                            <div
                              className="ant-row ant-form-item"
                              style={Object {}}
                            >
                              <FormItemLabel
                                htmlFor="add_user_role"
                                label="Role"
                                name="role"
                                prefixCls="ant-form"
                                required={false}
                                requiredMark={true}
                              >
                                <Col
                                  className="ant-form-item-label"
                                  span={6}
                                >
                                  <div
                                    className="ant-col ant-col-6 ant-form-item-label"
                                    style={Object {}}
                                  >
                                    <label
                                      className=""
                                      htmlFor="add_user_role"
                                      title="Role"
                                    >
                                      Role
                                    </label>
                                  </div>
                                </Col>
                              </FormItemLabel>
                              <FormItemInput
                                errors={Array []}
                                label="Role"
                                name={
                                  Array [
                                    "role",
                                  ]
                                }
                                onDomErrorVisibleChange={[Function]}
                                prefixCls="ant-form"
                                status=""
                                touched={false}
                                validateStatus=""
                                validating={false}
                              >
                                <Col
                                  className="ant-form-item-control"
                                  span={15}
                                >
                                  <div
                                    className="ant-col ant-col-15 ant-form-item-control"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-form-item-control-input"
                                    >
                                      <div
                                        className="ant-form-item-control-input-content"
                                      >
                                        <Component
                                          update={1}
                                          value="member"
                                        >
                                          <ForwardRef(InternalSelect)
                                            id="add_user_role"
                                            onChange={[Function]}
                                            placeholder="role"
                                            value="member"
                                          >
                                            <Select
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              dropdownClassName=""
                                              id="add_user_role"
                                              inputIcon={[Function]}
                                              listHeight={256}
                                              listItemHeight={24}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              onChange={[Function]}
                                              placeholder="role"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                              value="member"
                                            >
                                              <ForwardRef(Select)
                                                className=""
                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                dropdownClassName=""
                                                id="add_user_role"
                                                inputIcon={[Function]}
                                                listHeight={256}
                                                listItemHeight={24}
                                                menuItemSelectedIcon={null}
                                                notFoundContent={
                                                  <Context.Consumer>
                                                    [Function]
                                                  </Context.Consumer>
                                                }
                                                onChange={[Function]}
                                                placeholder="role"
                                                prefixCls="ant-select"
                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                transitionName="slide-up"
                                                value="member"
                                              >
                                                <div
                                                  className="ant-select ant-select-single ant-select-show-arrow"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <SelectTrigger
                                                    containerWidth={null}
                                                    dropdownClassName=""
                                                    empty={false}
                                                    getTriggerDOMNode={[Function]}
                                                    popupElement={
                                                      <ForwardRef(OptionList)
                                                        childrenAsData={true}
                                                        defaultActiveFirstOption={true}
                                                        flattenOptions={
                                                          Array [
                                                            Object {
                                                              "data": Object {
                                                                "children": "Owner",
                                                                "key": null,
                                                                "value": "owner",
                                                              },
                                                              "groupOption": false,
                                                              "key": "owner",
                                                            },
                                                            Object {
                                                              "data": Object {
                                                                "children": "Member",
                                                                "key": null,
                                                                "value": "member",
                                                              },
                                                              "groupOption": false,
                                                              "key": "member",
                                                            },
                                                          ]
                                                        }
                                                        height={256}
                                                        id="add_user_role"
                                                        itemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onActiveValue={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        options={
                                                          Array [
                                                            Object {
                                                              "children": "Owner",
                                                              "key": null,
                                                              "value": "owner",
                                                            },
                                                            Object {
                                                              "children": "Member",
                                                              "key": null,
                                                              "value": "member",
                                                            },
                                                          ]
                                                        }
                                                        prefixCls="ant-select"
                                                        searchValue=""
                                                        values={
                                                          Set {
                                                            "member",
                                                          }
                                                        }
                                                        virtual={true}
                                                      />
                                                    }
                                                    prefixCls="ant-select"
                                                    transitionName="slide-up"
                                                  >
                                                    <Trigger
                                                      action={Array []}
                                                      afterPopupVisibleChange={[Function]}
                                                      autoDestroy={false}
                                                      blurDelay={0.15}
                                                      builtinPlacements={
                                                        Object {
                                                          "bottomLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tl",
                                                              "bl",
                                                            ],
                                                          },
                                                          "bottomRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "tr",
                                                              "br",
                                                            ],
                                                          },
                                                          "topLeft": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "bl",
                                                              "tl",
                                                            ],
                                                          },
                                                          "topRight": Object {
                                                            "offset": Array [
                                                              0,
                                                              -4,
                                                            ],
                                                            "overflow": Object {
                                                              "adjustX": 0,
                                                              "adjustY": 1,
                                                            },
                                                            "points": Array [
                                                              "br",
                                                              "tr",
                                                            ],
                                                          },
                                                        }
                                                      }
                                                      defaultPopupVisible={false}
                                                      destroyPopupOnHide={false}
                                                      focusDelay={0}
                                                      getDocument={[Function]}
                                                      getPopupClassNameFromAlign={[Function]}
                                                      getTriggerDOMNode={[Function]}
                                                      hideAction={Array []}
                                                      mask={false}
                                                      maskClosable={true}
                                                      mouseEnterDelay={0}
                                                      mouseLeaveDelay={0.1}
                                                      onPopupAlign={[Function]}
                                                      onPopupVisibleChange={[Function]}
                                                      popup={
                                                        <div>
                                                          <ForwardRef(OptionList)
                                                            childrenAsData={true}
                                                            defaultActiveFirstOption={true}
                                                            flattenOptions={
                                                              Array [
                                                                Object {
                                                                  "data": Object {
                                                                    "children": "Owner",
                                                                    "key": null,
                                                                    "value": "owner",
                                                                  },
                                                                  "groupOption": false,
                                                                  "key": "owner",
                                                                },
                                                                Object {
                                                                  "data": Object {
                                                                    "children": "Member",
                                                                    "key": null,
                                                                    "value": "member",
                                                                  },
                                                                  "groupOption": false,
                                                                  "key": "member",
                                                                },
                                                              ]
                                                            }
                                                            height={256}
                                                            id="add_user_role"
                                                            itemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onActiveValue={[Function]}
                                                            onMouseEnter={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "children": "Owner",
                                                                  "key": null,
                                                                  "value": "owner",
                                                                },
                                                                Object {
                                                                  "children": "Member",
                                                                  "key": null,
                                                                  "value": "member",
                                                                },
                                                              ]
                                                            }
                                                            prefixCls="ant-select"
                                                            searchValue=""
                                                            values={
                                                              Set {
                                                                "member",
                                                              }
                                                            }
                                                            virtual={true}
                                                          />
                                                        </div>
                                                      }
                                                      popupAlign={Object {}}
                                                      popupClassName=""
                                                      popupPlacement="bottomLeft"
                                                      popupStyle={
                                                        Object {
                                                          "minWidth": null,
                                                          "width": null,
                                                        }
                                                      }
                                                      popupTransitionName="slide-up"
                                                      prefixCls="ant-select-dropdown"
                                                      showAction={Array []}
                                                    >
                                                      <Selector
                                                        accessibilityIndex={0}
                                                        activeValue={null}
                                                        className=""
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        domRef={
                                                          Object {
                                                            "current": <div
                                                              class="ant-select-selector"
                                                            >
                                                              <span
                                                                class="ant-select-selection-search"
                                                              >
                                                                <input
                                                                  aria-activedescendant="add_user_role_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="add_user_role_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="add_user_role_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="add_user_role"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  type="search"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </span>
                                                              <span
                                                                class="ant-select-selection-item"
                                                                title="Member"
                                                              >
                                                                Member
                                                              </span>
                                                            </div>,
                                                          }
                                                        }
                                                        dropdownClassName=""
                                                        id="add_user_role"
                                                        inputElement={null}
                                                        inputIcon={[Function]}
                                                        key="trigger"
                                                        listHeight={256}
                                                        listItemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        multiple={false}
                                                        notFoundContent={
                                                          <Context.Consumer>
                                                            [Function]
                                                          </Context.Consumer>
                                                        }
                                                        onChange={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchSubmit={[Function]}
                                                        onSelect={[Function]}
                                                        onToggleOpen={[Function]}
                                                        placeholder="role"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        searchValue=""
                                                        showSearch={false}
                                                        tokenWithEnter={false}
                                                        transitionName="slide-up"
                                                        value="member"
                                                        values={
                                                          Array [
                                                            Object {
                                                              "disabled": undefined,
                                                              "key": "member",
                                                              "label": "Member",
                                                              "value": "member",
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <div
                                                          className="ant-select-selector"
                                                          onClick={[Function]}
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SingleSelector
                                                            accessibilityIndex={0}
                                                            activeValue={null}
                                                            className=""
                                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                            domRef={
                                                              Object {
                                                                "current": <div
                                                                  class="ant-select-selector"
                                                                >
                                                                  <span
                                                                    class="ant-select-selection-search"
                                                                  >
                                                                    <input
                                                                      aria-activedescendant="add_user_role_list_0"
                                                                      aria-autocomplete="list"
                                                                      aria-controls="add_user_role_list"
                                                                      aria-haspopup="listbox"
                                                                      aria-owns="add_user_role_list"
                                                                      autocomplete="off"
                                                                      class="ant-select-selection-search-input"
                                                                      id="add_user_role"
                                                                      readonly=""
                                                                      role="combobox"
                                                                      style="opacity: 0;"
                                                                      type="search"
                                                                      unselectable="on"
                                                                      value=""
                                                                    />
                                                                  </span>
                                                                  <span
                                                                    class="ant-select-selection-item"
                                                                    title="Member"
                                                                  >
                                                                    Member
                                                                  </span>
                                                                </div>,
                                                              }
                                                            }
                                                            dropdownClassName=""
                                                            id="add_user_role"
                                                            inputElement={null}
                                                            inputIcon={[Function]}
                                                            inputRef={
                                                              Object {
                                                                "current": <input
                                                                  aria-activedescendant="add_user_role_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="add_user_role_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="add_user_role_list"
                                                                  autocomplete="off"
                                                                  class="ant-select-selection-search-input"
                                                                  id="add_user_role"
                                                                  readonly=""
                                                                  role="combobox"
                                                                  style="opacity: 0;"
                                                                  type="search"
                                                                  unselectable="on"
                                                                  value=""
                                                                />,
                                                              }
                                                            }
                                                            listHeight={256}
                                                            listItemHeight={24}
                                                            menuItemSelectedIcon={null}
                                                            multiple={false}
                                                            notFoundContent={
                                                              <Context.Consumer>
                                                                [Function]
                                                              </Context.Consumer>
                                                            }
                                                            onChange={[Function]}
                                                            onInputChange={[Function]}
                                                            onInputCompositionEnd={[Function]}
                                                            onInputCompositionStart={[Function]}
                                                            onInputKeyDown={[Function]}
                                                            onInputMouseDown={[Function]}
                                                            onInputPaste={[Function]}
                                                            onSearch={[Function]}
                                                            onSearchSubmit={[Function]}
                                                            onSelect={[Function]}
                                                            onToggleOpen={[Function]}
                                                            placeholder="role"
                                                            prefixCls="ant-select"
                                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                                            searchValue=""
                                                            showSearch={false}
                                                            tokenWithEnter={false}
                                                            transitionName="slide-up"
                                                            value="member"
                                                            values={
                                                              Array [
                                                                Object {
                                                                  "disabled": undefined,
                                                                  "key": "member",
                                                                  "label": "Member",
                                                                  "value": "member",
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <span
                                                              className="ant-select-selection-search"
                                                            >
                                                              <Input
                                                                accessibilityIndex={0}
                                                                attrs={Object {}}
                                                                editable={false}
                                                                id="add_user_role"
                                                                inputElement={null}
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                prefixCls="ant-select"
                                                                value=""
                                                              >
                                                                <input
                                                                  aria-activedescendant="add_user_role_list_0"
                                                                  aria-autocomplete="list"
                                                                  aria-controls="add_user_role_list"
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="add_user_role_list"
                                                                  autoComplete="off"
                                                                  className="ant-select-selection-search-input"
                                                                  id="add_user_role"
                                                                  onChange={[Function]}
                                                                  onCompositionEnd={[Function]}
                                                                  onCompositionStart={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onPaste={[Function]}
                                                                  readOnly={true}
                                                                  role="combobox"
                                                                  style={
                                                                    Object {
                                                                      "opacity": 0,
                                                                    }
                                                                  }
                                                                  type="search"
                                                                  unselectable="on"
                                                                  value=""
                                                                />
                                                              </Input>
                                                            </span>
                                                            <span
                                                              className="ant-select-selection-item"
                                                              title="Member"
                                                            >
                                                              Member
                                                            </span>
                                                          </SingleSelector>
                                                        </div>
                                                      </Selector>
                                                    </Trigger>
                                                  </SelectTrigger>
                                                  <TransBtn
                                                    className="ant-select-arrow"
                                                    customizeIcon={[Function]}
                                                    customizeIconProps={
                                                      Object {
                                                        "focused": false,
                                                        "loading": undefined,
                                                        "open": undefined,
                                                        "searchValue": "",
                                                        "showSearch": false,
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="ant-select-arrow"
                                                      onMouseDown={[Function]}
                                                      style={
                                                        Object {
                                                          "WebkitUserSelect": "none",
                                                          "userSelect": "none",
                                                        }
                                                      }
                                                      unselectable="on"
                                                    >
                                                      <ForwardRef(DownOutlined)
                                                        className="ant-select-suffix"
                                                      >
                                                        <AntdIcon
                                                          className="ant-select-suffix"
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "64 64 896 896",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "down",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            aria-label="down"
                                                            className="anticon anticon-down ant-select-suffix"
                                                            role="img"
                                                          >
                                                            <IconReact
                                                              icon={
                                                                Object {
                                                                  "icon": Object {
                                                                    "attrs": Object {
                                                                      "focusable": "false",
                                                                      "viewBox": "64 64 896 896",
                                                                    },
                                                                    "children": Array [
                                                                      Object {
                                                                        "attrs": Object {
                                                                          "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                        },
                                                                        "tag": "path",
                                                                      },
                                                                    ],
                                                                    "tag": "svg",
                                                                  },
                                                                  "name": "down",
                                                                  "theme": "outlined",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                data-icon="down"
                                                                fill="currentColor"
                                                                focusable="false"
                                                                height="1em"
                                                                key="svg-down"
                                                                viewBox="64 64 896 896"
                                                                width="1em"
                                                              >
                                                                <path
                                                                  d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                  key="svg-down-svg-0"
                                                                />
                                                              </svg>
                                                            </IconReact>
                                                          </span>
                                                        </AntdIcon>
                                                      </ForwardRef(DownOutlined)>
                                                    </span>
                                                  </TransBtn>
                                                </div>
                                              </ForwardRef(Select)>
                                            </Select>
                                          </ForwardRef(InternalSelect)>
                                        </Component>
                                      </div>
                                    </div>
                                    <ErrorList
                                      errors={Array []}
                                      onDomErrorVisibleChange={[Function]}
                                    >
                                      <CSSMotion
                                        motionAppear={true}
                                        motionDeadline={500}
                                        motionName="show-help"
                                        onLeaveEnd={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </ErrorList>
                                  </div>
                                </Col>
                              </FormItemInput>
                            </div>
                          </Row>
                        </Field>
                      </WrapperField>
                    </FormItem>
                    <FormItem>
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            prefixCls="ant-form"
                            requiredMark={true}
                          />
                          <FormItemInput
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            validateStatus=""
                          >
                            <Col
                              className="ant-form-item-control"
                              span={15}
                            >
                              <div
                                className="ant-col ant-col-15 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Button
                                      block={true}
                                      form="add_user"
                                      htmlType="submit"
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary ant-btn-block"
                                          form="add_user"
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Add
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </FormItem>
                  </form>
                </ForwardRef(Form)>
              </SizeContextProvider>
            </ForwardRef(InternalForm)>
          </div>
        </div>
      </Card>
    </div>
  </NewUser>
</Provider>
`;
