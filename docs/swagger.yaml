basePath: /
definitions:
  application.application:
    properties:
      description:
        type: string
      medium_id:
        type: integer
      name:
        type: string
      slug:
        type: string
      url:
        type: string
    required:
    - name
    - slug
    - url
    type: object
  medium.medium:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      description:
        type: string
      dimensions:
        type: string
      file_size:
        type: integer
      name:
        type: string
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      url:
        type: string
    required:
    - dimensions
    - file_size
    - name
    - type
    type: object
  medium.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.Medium'
        type: array
      total:
        type: integer
    type: object
  model.Application:
    properties:
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      medium:
        $ref: '#/definitions/model.Medium'
      medium_id:
        type: integer
      name:
        type: string
      organisation:
        $ref: '#/definitions/model.Organisation'
      organisation_id:
        type: integer
      slug:
        type: string
      tokens:
        items:
          $ref: '#/definitions/model.ApplicationToken'
        type: array
      updated_at:
        type: string
      updated_by_id:
        type: integer
      url:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.ApplicationToken:
    properties:
      access_token:
        type: string
      application:
        $ref: '#/definitions/model.Application'
      application_id:
        type: integer
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  model.Medium:
    properties:
      alt_text:
        type: string
      caption:
        type: string
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      dimensions:
        type: string
      file_size:
        type: integer
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
      url:
        type: string
      user_id:
        type: integer
    type: object
  model.Organisation:
    properties:
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      featured_medium_id:
        type: integer
      id:
        type: integer
      medium:
        $ref: '#/definitions/model.Medium'
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  model.OrganisationUser:
    properties:
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      id:
        type: integer
      organisation:
        $ref: '#/definitions/model.Organisation'
      organisation_id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.User:
    properties:
      birth_date:
        type: string
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      display_name:
        type: string
      email:
        type: string
      featured_medium_id:
        type: integer
      first_name:
        type: string
      gender:
        type: string
      id:
        type: integer
      kid:
        type: string
      last_name:
        type: string
      medium:
        $ref: '#/definitions/model.Medium'
      slug:
        type: string
      social_media_urls:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  organisation.orgWithRole:
    properties:
      applications:
        items:
          $ref: '#/definitions/model.Application'
        type: array
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      featured_medium_id:
        type: integer
      id:
        type: integer
      medium:
        $ref: '#/definitions/model.Medium'
      permission:
        $ref: '#/definitions/model.OrganisationUser'
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  organisation.organisation:
    properties:
      description:
        type: string
      featured_medium_id:
        type: integer
      slug:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  profile.user:
    properties:
      birth_date:
        type: string
      description:
        type: string
      display_name:
        type: string
      featured_medium_id:
        type: integer
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      slug:
        type: string
      social_media_urls:
        type: string
    type: object
  token.ValidationBody:
    properties:
      access_token:
        type: string
      secret_token:
        type: string
    required:
    - access_token
    - secret_token
    type: object
  token.applicationToken:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  token.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.ApplicationToken'
        type: array
      total:
        type: integer
    type: object
  user.applicationUsers:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  user.invite:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        type: string
    required:
    - email
    - first_name
    - role
    type: object
  user.paging:
    properties:
      nodes:
        items:
          $ref: '#/definitions/model.User'
        type: array
      total:
        type: integer
    type: object
  user.userWithPermission:
    properties:
      birth_date:
        type: string
      created_at:
        type: string
      created_by_id:
        type: integer
      deleted_at:
        type: string
      description:
        type: string
      display_name:
        type: string
      email:
        type: string
      featured_medium_id:
        type: integer
      first_name:
        type: string
      gender:
        type: string
      id:
        type: integer
      kid:
        type: string
      last_name:
        type: string
      medium:
        $ref: '#/definitions/model.Medium'
      permission:
        $ref: '#/definitions/model.OrganisationUser'
      slug:
        type: string
      social_media_urls:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
host: localhost:5000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Kavach Server API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Kavach Server API
  version: "1.0"
paths:
  /applications/{application_slug}/validateToken:
    post:
      description: validate application token
      operationId: validate-organisation-application-token
      parameters:
      - description: Application Slug
        in: path
        name: application_slug
        required: true
        type: string
      - description: Validation Body
        in: body
        name: ValidationBody
        required: true
        schema:
          $ref: '#/definitions/token.ValidationBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Application'
      summary: Show a application token
      tags:
      - OrganisationApplicationsTokens
  /media:
    get:
      description: Get all media
      operationId: get-all-media
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Sort
        in: query
        name: sort
        type: string
      - description: limit per page
        in: query
        name: limit
        type: string
      - description: page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/medium.paging'
            type: array
      summary: Show all media
      tags:
      - Medium
    post:
      description: Create medium
      operationId: add-medium
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium Object
        in: body
        name: Medium
        required: true
        schema:
          $ref: '#/definitions/medium.medium'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Medium'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create medium
      tags:
      - Medium
  /media/{medium_id}:
    delete:
      description: Delete medium by ID
      operationId: delete-medium-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      responses:
        "200":
          description: ""
      summary: Delete a medium
      tags:
      - Medium
    get:
      description: Get medium by ID
      operationId: get-medium-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Medium'
      summary: Show a medium by id
      tags:
      - Medium
    put:
      description: Update medium by ID
      operationId: update-medium-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Medium ID
        in: path
        name: medium_id
        required: true
        type: string
      - description: Medium
        in: body
        name: Medium
        schema:
          $ref: '#/definitions/medium.medium'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Medium'
      summary: Update a medium by id
      tags:
      - Medium
  /organisations:
    get:
      description: Get all organisations
      operationId: get-all-organisations
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Query
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Organisation'
            type: array
      summary: Show all organisations
      tags:
      - Organisation
    post:
      description: Create organisation
      operationId: add-organisation
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation Object
        in: body
        name: Organisation
        required: true
        schema:
          $ref: '#/definitions/organisation.organisation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/organisation.orgWithRole'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create organisation
      tags:
      - Organisation
  /organisations/{organisation_id}:
    delete:
      description: Delete organisation by ID
      operationId: delete-organisation-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      responses:
        "200":
          description: ""
      summary: Delete a organisation
      tags:
      - Organisation
    get:
      description: Get organisation by ID
      operationId: get-organisation-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organisation.orgWithRole'
      summary: Show a organisation by id
      tags:
      - Organisation
    put:
      description: Update organisation by ID
      operationId: update-organisation-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Organisation Object
        in: body
        name: Organisation
        schema:
          $ref: '#/definitions/model.Organisation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organisation.orgWithRole'
      summary: Update a organisation by id
      tags:
      - Organisation
  /organisations/{organisation_id}/applications:
    get:
      description: Get all organisations applications
      operationId: get-all-organisations-applications
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/model.Application'
              type: array
            type: array
      summary: Show all organisations applications
      tags:
      - OrganisationApplications
    post:
      description: Create organisation application
      operationId: add-organisation-application
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application Object
        in: body
        name: Application
        required: true
        schema:
          $ref: '#/definitions/application.application'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Application'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create organisation application
      tags:
      - OrganisationApplications
  /organisations/{organisation_id}/applications/{application_id}:
    delete:
      description: Delete application by ID
      operationId: delete-application-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      responses:
        "200":
          description: ""
      summary: Delete a application
      tags:
      - OrganisationApplications
    get:
      description: Get application by ID
      operationId: get-organisation-application-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Application'
      summary: Show a application by id
      tags:
      - OrganisationApplications
    put:
      description: Update application by ID
      operationId: update-application-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      - description: Application Object
        in: body
        name: Application
        schema:
          $ref: '#/definitions/application.application'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Application'
      summary: Update a application by id
      tags:
      - OrganisationApplications
  /organisations/{organisation_id}/applications/{application_id}/tokens:
    get:
      description: Show a application tokens
      operationId: get-organisation-application-tokens
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/token.paging'
      summary: List application tokens
      tags:
      - OrganisationApplicationsTokens
    post:
      description: Create application token by ID
      operationId: create-organisation-application-token
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      - description: Application Token Body
        in: body
        name: ApplicationTokenBody
        required: true
        schema:
          $ref: '#/definitions/token.applicationToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApplicationToken'
      summary: Show a application token by id
      tags:
      - OrganisationApplicationsTokens
  /organisations/{organisation_id}/applications/{application_id}/tokens/{token_id}:
    delete:
      description: Delete application token by ID
      operationId: delete-application-token-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      - description: Token ID
        in: path
        name: token_id
        required: true
        type: string
      responses:
        "200":
          description: ""
      summary: Delete a applicationa token
      tags:
      - OrganisationApplicationsTokens
  /organisations/{organisation_id}/applications/{application_id}/users:
    get:
      description: Get all applications users
      operationId: get-all-applications-users
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Application'
            type: array
      summary: Show all applications users
      tags:
      - ApplicationUser
    post:
      description: Create application user
      operationId: add-application-user
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: User ID Object
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/user.applicationUsers'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create application user
      tags:
      - ApplicationUser
  /organisations/{organisation_id}/applications/{application_id}/users/{user_id}:
    delete:
      description: Delete application user by ID
      operationId: delete-application-user-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Application ID
        in: path
        name: application_id
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: ""
      summary: Delete a application user
      tags:
      - ApplicationUser
  /organisations/{organisation_id}/applications/{application_slug}/access:
    get:
      description: Get access of application based on slug
      operationId: get-access-organisation-application
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Application Slug
        in: path
        name: application_slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "401":
          description: ""
      summary: Get access of application based on slug
      tags:
      - OrganisationApplications
  /organisations/{organisation_id}/applications/default:
    post:
      description: Create Default applications
      operationId: add-default-applications
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.Application'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create Default applications
      tags:
      - OrganisationApplications
  /organisations/{organisation_id}/users:
    get:
      description: Get all organisations users
      operationId: get-all-organisations-users
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/user.userWithPermission'
              type: array
            type: array
      summary: Show all organisations users
      tags:
      - OrganisationUser
    post:
      description: Create organisation user
      operationId: add-organisation-user
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: Invite Object
        in: body
        name: Invite
        required: true
        schema:
          $ref: '#/definitions/user.invite'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.userWithPermission'
        "400":
          description: Bad Request
          schema:
            items:
              type: string
            type: array
      summary: Create organisation user
      tags:
      - OrganisationUser
  /organisations/{organisation_id}/users/{user_id}:
    delete:
      description: Delete organisation user by ID
      operationId: delete-organisation-user-by-id
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: path
        name: organisation_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: ""
      summary: Delete a organisation user
      tags:
      - OrganisationUser
  /organisations/my:
    get:
      description: Get all organisations
      operationId: get-all-my-organisations
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/organisation.orgWithRole'
              type: array
            type: array
      summary: Show all organisations
      tags:
      - Organisation
  /profile:
    get:
      description: Get logged in user details
      operationId: get-logged-in-user
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get logged in user details
      tags:
      - Profile
    put:
      description: Update user info
      operationId: update-logged-in-user
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: User
        in: body
        name: User
        schema:
          $ref: '#/definitions/profile.user'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Update user info
      tags:
      - Profile
  /users/application:
    get:
      description: Get list of users for application
      operationId: get-user-list
      parameters:
      - description: User ID
        in: header
        name: X-User
        required: true
        type: string
      - description: Organisation ID
        in: header
        name: X-Organisation
        required: true
        type: string
      - description: Application Slug
        in: query
        name: application
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.paging'
      summary: Get list of users for application
      tags:
      - User
swagger: "2.0"
